/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1SecurityContext : SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1SecurityContext {
  /// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
  #[serde(rename = "allowPrivilegeEscalation")]
  allow_privilege_escalation: Option<bool>,
  /// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
  #[serde(rename = "capabilities")]
  capabilities: Option<::models::V1Capabilities>,
  /// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
  #[serde(rename = "privileged")]
  privileged: Option<bool>,
  /// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
  #[serde(rename = "procMount")]
  proc_mount: Option<String>,
  /// Whether this container has a read-only root filesystem. Default is false.
  #[serde(rename = "readOnlyRootFilesystem")]
  read_only_root_filesystem: Option<bool>,
  /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  #[serde(rename = "runAsGroup")]
  run_as_group: Option<i64>,
  /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  #[serde(rename = "runAsNonRoot")]
  run_as_non_root: Option<bool>,
  /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  #[serde(rename = "runAsUser")]
  run_as_user: Option<i64>,
  /// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
  #[serde(rename = "seLinuxOptions")]
  se_linux_options: Option<::models::V1SeLinuxOptions>
}

impl V1SecurityContext {
  /// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
  pub fn new() -> V1SecurityContext {
    V1SecurityContext {
      allow_privilege_escalation: None,
      capabilities: None,
      privileged: None,
      proc_mount: None,
      read_only_root_filesystem: None,
      run_as_group: None,
      run_as_non_root: None,
      run_as_user: None,
      se_linux_options: None
    }
  }

  pub fn set_allow_privilege_escalation(&mut self, allow_privilege_escalation: bool) {
    self.allow_privilege_escalation = Some(allow_privilege_escalation);
  }

  pub fn with_allow_privilege_escalation(mut self, allow_privilege_escalation: bool) -> V1SecurityContext {
    self.allow_privilege_escalation = Some(allow_privilege_escalation);
    self
  }

  pub fn allow_privilege_escalation(&self) -> Option<&bool> {
    self.allow_privilege_escalation.as_ref()
  }

  pub fn reset_allow_privilege_escalation(&mut self) {
    self.allow_privilege_escalation = None;
  }

  pub fn set_capabilities(&mut self, capabilities: ::models::V1Capabilities) {
    self.capabilities = Some(capabilities);
  }

  pub fn with_capabilities(mut self, capabilities: ::models::V1Capabilities) -> V1SecurityContext {
    self.capabilities = Some(capabilities);
    self
  }

  pub fn capabilities(&self) -> Option<&::models::V1Capabilities> {
    self.capabilities.as_ref()
  }

  pub fn reset_capabilities(&mut self) {
    self.capabilities = None;
  }

  pub fn set_privileged(&mut self, privileged: bool) {
    self.privileged = Some(privileged);
  }

  pub fn with_privileged(mut self, privileged: bool) -> V1SecurityContext {
    self.privileged = Some(privileged);
    self
  }

  pub fn privileged(&self) -> Option<&bool> {
    self.privileged.as_ref()
  }

  pub fn reset_privileged(&mut self) {
    self.privileged = None;
  }

  pub fn set_proc_mount(&mut self, proc_mount: String) {
    self.proc_mount = Some(proc_mount);
  }

  pub fn with_proc_mount(mut self, proc_mount: String) -> V1SecurityContext {
    self.proc_mount = Some(proc_mount);
    self
  }

  pub fn proc_mount(&self) -> Option<&String> {
    self.proc_mount.as_ref()
  }

  pub fn reset_proc_mount(&mut self) {
    self.proc_mount = None;
  }

  pub fn set_read_only_root_filesystem(&mut self, read_only_root_filesystem: bool) {
    self.read_only_root_filesystem = Some(read_only_root_filesystem);
  }

  pub fn with_read_only_root_filesystem(mut self, read_only_root_filesystem: bool) -> V1SecurityContext {
    self.read_only_root_filesystem = Some(read_only_root_filesystem);
    self
  }

  pub fn read_only_root_filesystem(&self) -> Option<&bool> {
    self.read_only_root_filesystem.as_ref()
  }

  pub fn reset_read_only_root_filesystem(&mut self) {
    self.read_only_root_filesystem = None;
  }

  pub fn set_run_as_group(&mut self, run_as_group: i64) {
    self.run_as_group = Some(run_as_group);
  }

  pub fn with_run_as_group(mut self, run_as_group: i64) -> V1SecurityContext {
    self.run_as_group = Some(run_as_group);
    self
  }

  pub fn run_as_group(&self) -> Option<&i64> {
    self.run_as_group.as_ref()
  }

  pub fn reset_run_as_group(&mut self) {
    self.run_as_group = None;
  }

  pub fn set_run_as_non_root(&mut self, run_as_non_root: bool) {
    self.run_as_non_root = Some(run_as_non_root);
  }

  pub fn with_run_as_non_root(mut self, run_as_non_root: bool) -> V1SecurityContext {
    self.run_as_non_root = Some(run_as_non_root);
    self
  }

  pub fn run_as_non_root(&self) -> Option<&bool> {
    self.run_as_non_root.as_ref()
  }

  pub fn reset_run_as_non_root(&mut self) {
    self.run_as_non_root = None;
  }

  pub fn set_run_as_user(&mut self, run_as_user: i64) {
    self.run_as_user = Some(run_as_user);
  }

  pub fn with_run_as_user(mut self, run_as_user: i64) -> V1SecurityContext {
    self.run_as_user = Some(run_as_user);
    self
  }

  pub fn run_as_user(&self) -> Option<&i64> {
    self.run_as_user.as_ref()
  }

  pub fn reset_run_as_user(&mut self) {
    self.run_as_user = None;
  }

  pub fn set_se_linux_options(&mut self, se_linux_options: ::models::V1SeLinuxOptions) {
    self.se_linux_options = Some(se_linux_options);
  }

  pub fn with_se_linux_options(mut self, se_linux_options: ::models::V1SeLinuxOptions) -> V1SecurityContext {
    self.se_linux_options = Some(se_linux_options);
    self
  }

  pub fn se_linux_options(&self) -> Option<&::models::V1SeLinuxOptions> {
    self.se_linux_options.as_ref()
  }

  pub fn reset_se_linux_options(&mut self) {
    self.se_linux_options = None;
  }

}



