/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1CustomResourceDefinitionSpec : CustomResourceDefinitionSpec describes how a user wants their resource to appear

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1CustomResourceDefinitionSpec {
  /// AdditionalPrinterColumns are additional columns shown e.g. in kubectl next to the name. Defaults to a created-at column.
  #[serde(rename = "additionalPrinterColumns")]
  additional_printer_columns: Option<Vec<::models::V1beta1CustomResourceColumnDefinition>>,
  /// Group is the group this resource belongs in
  #[serde(rename = "group")]
  group: String,
  /// Names are the names used to describe this custom resource
  #[serde(rename = "names")]
  names: ::models::V1beta1CustomResourceDefinitionNames,
  /// Scope indicates whether this resource is cluster or namespace scoped.  Default is namespaced
  #[serde(rename = "scope")]
  scope: String,
  /// Subresources describes the subresources for CustomResources
  #[serde(rename = "subresources")]
  subresources: Option<::models::V1beta1CustomResourceSubresources>,
  /// Validation describes the validation methods for CustomResources
  #[serde(rename = "validation")]
  validation: Option<::models::V1beta1CustomResourceValidation>,
  /// Version is the version this resource belongs in Should be always first item in Versions field if provided. Optional, but at least one of Version or Versions must be set. Deprecated: Please use `Versions`.
  #[serde(rename = "version")]
  version: Option<String>,
  /// Versions is the list of all supported versions for this resource. If Version field is provided, this field is optional. Validation: All versions must use the same validation schema for now. i.e., top level Validation field is applied to all of these versions. Order: The version name will be used to compute the order. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
  #[serde(rename = "versions")]
  versions: Option<Vec<::models::V1beta1CustomResourceDefinitionVersion>>
}

impl V1beta1CustomResourceDefinitionSpec {
  /// CustomResourceDefinitionSpec describes how a user wants their resource to appear
  pub fn new(group: String, names: ::models::V1beta1CustomResourceDefinitionNames, scope: String) -> V1beta1CustomResourceDefinitionSpec {
    V1beta1CustomResourceDefinitionSpec {
      additional_printer_columns: None,
      group: group,
      names: names,
      scope: scope,
      subresources: None,
      validation: None,
      version: None,
      versions: None
    }
  }

  pub fn set_additional_printer_columns(&mut self, additional_printer_columns: Vec<::models::V1beta1CustomResourceColumnDefinition>) {
    self.additional_printer_columns = Some(additional_printer_columns);
  }

  pub fn with_additional_printer_columns(mut self, additional_printer_columns: Vec<::models::V1beta1CustomResourceColumnDefinition>) -> V1beta1CustomResourceDefinitionSpec {
    self.additional_printer_columns = Some(additional_printer_columns);
    self
  }

  pub fn additional_printer_columns(&self) -> Option<&Vec<::models::V1beta1CustomResourceColumnDefinition>> {
    self.additional_printer_columns.as_ref()
  }

  pub fn reset_additional_printer_columns(&mut self) {
    self.additional_printer_columns = None;
  }

  pub fn set_group(&mut self, group: String) {
    self.group = group;
  }

  pub fn with_group(mut self, group: String) -> V1beta1CustomResourceDefinitionSpec {
    self.group = group;
    self
  }

  pub fn group(&self) -> &String {
    &self.group
  }


  pub fn set_names(&mut self, names: ::models::V1beta1CustomResourceDefinitionNames) {
    self.names = names;
  }

  pub fn with_names(mut self, names: ::models::V1beta1CustomResourceDefinitionNames) -> V1beta1CustomResourceDefinitionSpec {
    self.names = names;
    self
  }

  pub fn names(&self) -> &::models::V1beta1CustomResourceDefinitionNames {
    &self.names
  }


  pub fn set_scope(&mut self, scope: String) {
    self.scope = scope;
  }

  pub fn with_scope(mut self, scope: String) -> V1beta1CustomResourceDefinitionSpec {
    self.scope = scope;
    self
  }

  pub fn scope(&self) -> &String {
    &self.scope
  }


  pub fn set_subresources(&mut self, subresources: ::models::V1beta1CustomResourceSubresources) {
    self.subresources = Some(subresources);
  }

  pub fn with_subresources(mut self, subresources: ::models::V1beta1CustomResourceSubresources) -> V1beta1CustomResourceDefinitionSpec {
    self.subresources = Some(subresources);
    self
  }

  pub fn subresources(&self) -> Option<&::models::V1beta1CustomResourceSubresources> {
    self.subresources.as_ref()
  }

  pub fn reset_subresources(&mut self) {
    self.subresources = None;
  }

  pub fn set_validation(&mut self, validation: ::models::V1beta1CustomResourceValidation) {
    self.validation = Some(validation);
  }

  pub fn with_validation(mut self, validation: ::models::V1beta1CustomResourceValidation) -> V1beta1CustomResourceDefinitionSpec {
    self.validation = Some(validation);
    self
  }

  pub fn validation(&self) -> Option<&::models::V1beta1CustomResourceValidation> {
    self.validation.as_ref()
  }

  pub fn reset_validation(&mut self) {
    self.validation = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> V1beta1CustomResourceDefinitionSpec {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_versions(&mut self, versions: Vec<::models::V1beta1CustomResourceDefinitionVersion>) {
    self.versions = Some(versions);
  }

  pub fn with_versions(mut self, versions: Vec<::models::V1beta1CustomResourceDefinitionVersion>) -> V1beta1CustomResourceDefinitionSpec {
    self.versions = Some(versions);
    self
  }

  pub fn versions(&self) -> Option<&Vec<::models::V1beta1CustomResourceDefinitionVersion>> {
    self.versions.as_ref()
  }

  pub fn reset_versions(&mut self) {
    self.versions = None;
  }

}



