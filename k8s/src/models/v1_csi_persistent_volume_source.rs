/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1CsiPersistentVolumeSource : Represents storage that is managed by an external CSI volume driver (Beta feature)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1CsiPersistentVolumeSource {
  /// ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  #[serde(rename = "controllerPublishSecretRef")]
  controller_publish_secret_ref: Option<::models::V1SecretReference>,
  /// Driver is the name of the driver to use for this volume. Required.
  #[serde(rename = "driver")]
  driver: String,
  /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".
  #[serde(rename = "fsType")]
  fs_type: Option<String>,
  /// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  #[serde(rename = "nodePublishSecretRef")]
  node_publish_secret_ref: Option<::models::V1SecretReference>,
  /// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
  #[serde(rename = "nodeStageSecretRef")]
  node_stage_secret_ref: Option<::models::V1SecretReference>,
  /// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
  #[serde(rename = "readOnly")]
  read_only: Option<bool>,
  /// Attributes of the volume to publish.
  #[serde(rename = "volumeAttributes")]
  volume_attributes: Option<::std::collections::HashMap<String, String>>,
  /// VolumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.
  #[serde(rename = "volumeHandle")]
  volume_handle: String
}

impl V1CsiPersistentVolumeSource {
  /// Represents storage that is managed by an external CSI volume driver (Beta feature)
  pub fn new(driver: String, volume_handle: String) -> V1CsiPersistentVolumeSource {
    V1CsiPersistentVolumeSource {
      controller_publish_secret_ref: None,
      driver: driver,
      fs_type: None,
      node_publish_secret_ref: None,
      node_stage_secret_ref: None,
      read_only: None,
      volume_attributes: None,
      volume_handle: volume_handle
    }
  }

  pub fn set_controller_publish_secret_ref(&mut self, controller_publish_secret_ref: ::models::V1SecretReference) {
    self.controller_publish_secret_ref = Some(controller_publish_secret_ref);
  }

  pub fn with_controller_publish_secret_ref(mut self, controller_publish_secret_ref: ::models::V1SecretReference) -> V1CsiPersistentVolumeSource {
    self.controller_publish_secret_ref = Some(controller_publish_secret_ref);
    self
  }

  pub fn controller_publish_secret_ref(&self) -> Option<&::models::V1SecretReference> {
    self.controller_publish_secret_ref.as_ref()
  }

  pub fn reset_controller_publish_secret_ref(&mut self) {
    self.controller_publish_secret_ref = None;
  }

  pub fn set_driver(&mut self, driver: String) {
    self.driver = driver;
  }

  pub fn with_driver(mut self, driver: String) -> V1CsiPersistentVolumeSource {
    self.driver = driver;
    self
  }

  pub fn driver(&self) -> &String {
    &self.driver
  }


  pub fn set_fs_type(&mut self, fs_type: String) {
    self.fs_type = Some(fs_type);
  }

  pub fn with_fs_type(mut self, fs_type: String) -> V1CsiPersistentVolumeSource {
    self.fs_type = Some(fs_type);
    self
  }

  pub fn fs_type(&self) -> Option<&String> {
    self.fs_type.as_ref()
  }

  pub fn reset_fs_type(&mut self) {
    self.fs_type = None;
  }

  pub fn set_node_publish_secret_ref(&mut self, node_publish_secret_ref: ::models::V1SecretReference) {
    self.node_publish_secret_ref = Some(node_publish_secret_ref);
  }

  pub fn with_node_publish_secret_ref(mut self, node_publish_secret_ref: ::models::V1SecretReference) -> V1CsiPersistentVolumeSource {
    self.node_publish_secret_ref = Some(node_publish_secret_ref);
    self
  }

  pub fn node_publish_secret_ref(&self) -> Option<&::models::V1SecretReference> {
    self.node_publish_secret_ref.as_ref()
  }

  pub fn reset_node_publish_secret_ref(&mut self) {
    self.node_publish_secret_ref = None;
  }

  pub fn set_node_stage_secret_ref(&mut self, node_stage_secret_ref: ::models::V1SecretReference) {
    self.node_stage_secret_ref = Some(node_stage_secret_ref);
  }

  pub fn with_node_stage_secret_ref(mut self, node_stage_secret_ref: ::models::V1SecretReference) -> V1CsiPersistentVolumeSource {
    self.node_stage_secret_ref = Some(node_stage_secret_ref);
    self
  }

  pub fn node_stage_secret_ref(&self) -> Option<&::models::V1SecretReference> {
    self.node_stage_secret_ref.as_ref()
  }

  pub fn reset_node_stage_secret_ref(&mut self) {
    self.node_stage_secret_ref = None;
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> V1CsiPersistentVolumeSource {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

  pub fn set_volume_attributes(&mut self, volume_attributes: ::std::collections::HashMap<String, String>) {
    self.volume_attributes = Some(volume_attributes);
  }

  pub fn with_volume_attributes(mut self, volume_attributes: ::std::collections::HashMap<String, String>) -> V1CsiPersistentVolumeSource {
    self.volume_attributes = Some(volume_attributes);
    self
  }

  pub fn volume_attributes(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.volume_attributes.as_ref()
  }

  pub fn reset_volume_attributes(&mut self) {
    self.volume_attributes = None;
  }

  pub fn set_volume_handle(&mut self, volume_handle: String) {
    self.volume_handle = volume_handle;
  }

  pub fn with_volume_handle(mut self, volume_handle: String) -> V1CsiPersistentVolumeSource {
    self.volume_handle = volume_handle;
    self
  }

  pub fn volume_handle(&self) -> &String {
    &self.volume_handle
  }


}



