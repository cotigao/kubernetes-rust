/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1EventSeries : EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1EventSeries {
  /// Number of occurrences in this series up to the last heartbeat time
  #[serde(rename = "count")]
  count: Option<i32>,
  /// Time of the last occurrence observed
  #[serde(rename = "lastObservedTime")]
  last_observed_time: Option<String>,
  /// State of this Series: Ongoing or Finished
  #[serde(rename = "state")]
  state: Option<String>
}

impl V1EventSeries {
  /// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
  pub fn new() -> V1EventSeries {
    V1EventSeries {
      count: None,
      last_observed_time: None,
      state: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> V1EventSeries {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_last_observed_time(&mut self, last_observed_time: String) {
    self.last_observed_time = Some(last_observed_time);
  }

  pub fn with_last_observed_time(mut self, last_observed_time: String) -> V1EventSeries {
    self.last_observed_time = Some(last_observed_time);
    self
  }

  pub fn last_observed_time(&self) -> Option<&String> {
    self.last_observed_time.as_ref()
  }

  pub fn reset_last_observed_time(&mut self) {
    self.last_observed_time = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> V1EventSeries {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

}



