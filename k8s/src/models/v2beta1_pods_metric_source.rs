/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V2beta1PodsMetricSource : PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2beta1PodsMetricSource {
  /// metricName is the name of the metric in question
  #[serde(rename = "metricName")]
  metric_name: String,
  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
  #[serde(rename = "selector")]
  selector: Option<::models::V1LabelSelector>,
  /// targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
  #[serde(rename = "targetAverageValue")]
  target_average_value: String
}

impl V2beta1PodsMetricSource {
  /// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
  pub fn new(metric_name: String, target_average_value: String) -> V2beta1PodsMetricSource {
    V2beta1PodsMetricSource {
      metric_name: metric_name,
      selector: None,
      target_average_value: target_average_value
    }
  }

  pub fn set_metric_name(&mut self, metric_name: String) {
    self.metric_name = metric_name;
  }

  pub fn with_metric_name(mut self, metric_name: String) -> V2beta1PodsMetricSource {
    self.metric_name = metric_name;
    self
  }

  pub fn metric_name(&self) -> &String {
    &self.metric_name
  }


  pub fn set_selector(&mut self, selector: ::models::V1LabelSelector) {
    self.selector = Some(selector);
  }

  pub fn with_selector(mut self, selector: ::models::V1LabelSelector) -> V2beta1PodsMetricSource {
    self.selector = Some(selector);
    self
  }

  pub fn selector(&self) -> Option<&::models::V1LabelSelector> {
    self.selector.as_ref()
  }

  pub fn reset_selector(&mut self) {
    self.selector = None;
  }

  pub fn set_target_average_value(&mut self, target_average_value: String) {
    self.target_average_value = target_average_value;
  }

  pub fn with_target_average_value(mut self, target_average_value: String) -> V2beta1PodsMetricSource {
    self.target_average_value = target_average_value;
    self
  }

  pub fn target_average_value(&self) -> &String {
    &self.target_average_value
  }


}



