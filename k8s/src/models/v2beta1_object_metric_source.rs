/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V2beta1ObjectMetricSource : ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2beta1ObjectMetricSource {
  /// averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
  #[serde(rename = "averageValue")]
  average_value: Option<String>,
  /// metricName is the name of the metric in question.
  #[serde(rename = "metricName")]
  metric_name: String,
  /// selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
  #[serde(rename = "selector")]
  selector: Option<::models::V1LabelSelector>,
  /// target is the described Kubernetes object.
  #[serde(rename = "target")]
  target: ::models::V2beta1CrossVersionObjectReference,
  /// targetValue is the target value of the metric (as a quantity).
  #[serde(rename = "targetValue")]
  target_value: String
}

impl V2beta1ObjectMetricSource {
  /// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
  pub fn new(metric_name: String, target: ::models::V2beta1CrossVersionObjectReference, target_value: String) -> V2beta1ObjectMetricSource {
    V2beta1ObjectMetricSource {
      average_value: None,
      metric_name: metric_name,
      selector: None,
      target: target,
      target_value: target_value
    }
  }

  pub fn set_average_value(&mut self, average_value: String) {
    self.average_value = Some(average_value);
  }

  pub fn with_average_value(mut self, average_value: String) -> V2beta1ObjectMetricSource {
    self.average_value = Some(average_value);
    self
  }

  pub fn average_value(&self) -> Option<&String> {
    self.average_value.as_ref()
  }

  pub fn reset_average_value(&mut self) {
    self.average_value = None;
  }

  pub fn set_metric_name(&mut self, metric_name: String) {
    self.metric_name = metric_name;
  }

  pub fn with_metric_name(mut self, metric_name: String) -> V2beta1ObjectMetricSource {
    self.metric_name = metric_name;
    self
  }

  pub fn metric_name(&self) -> &String {
    &self.metric_name
  }


  pub fn set_selector(&mut self, selector: ::models::V1LabelSelector) {
    self.selector = Some(selector);
  }

  pub fn with_selector(mut self, selector: ::models::V1LabelSelector) -> V2beta1ObjectMetricSource {
    self.selector = Some(selector);
    self
  }

  pub fn selector(&self) -> Option<&::models::V1LabelSelector> {
    self.selector.as_ref()
  }

  pub fn reset_selector(&mut self) {
    self.selector = None;
  }

  pub fn set_target(&mut self, target: ::models::V2beta1CrossVersionObjectReference) {
    self.target = target;
  }

  pub fn with_target(mut self, target: ::models::V2beta1CrossVersionObjectReference) -> V2beta1ObjectMetricSource {
    self.target = target;
    self
  }

  pub fn target(&self) -> &::models::V2beta1CrossVersionObjectReference {
    &self.target
  }


  pub fn set_target_value(&mut self, target_value: String) {
    self.target_value = target_value;
  }

  pub fn with_target_value(mut self, target_value: String) -> V2beta1ObjectMetricSource {
    self.target_value = target_value;
    self
  }

  pub fn target_value(&self) -> &String {
    &self.target_value
  }


}



