/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1Webhook : Webhook describes an admission webhook and the resources and operations it applies to.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1Webhook {
  /// ClientConfig defines how to communicate with the hook. Required
  #[serde(rename = "clientConfig")]
  client_config: ::models::V1beta1WebhookClientConfig,
  /// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
  #[serde(rename = "failurePolicy")]
  failure_policy: Option<String>,
  /// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
  #[serde(rename = "name")]
  name: String,
  /// NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.  For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"runlevel\",       \"operator\": \"NotIn\",       \"values\": [         \"0\",         \"1\"       ]     }   ] }  If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {   \"matchExpressions\": [     {       \"key\": \"environment\",       \"operator\": \"In\",       \"values\": [         \"prod\",         \"staging\"       ]     }   ] }  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.  Default to the empty LabelSelector, which matches everything.
  #[serde(rename = "namespaceSelector")]
  namespace_selector: Option<::models::V1LabelSelector>,
  /// Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
  #[serde(rename = "rules")]
  rules: Option<Vec<::models::V1beta1RuleWithOperations>>,
  /// SideEffects states whether this webhookk has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.
  #[serde(rename = "sideEffects")]
  side_effects: Option<String>
}

impl V1beta1Webhook {
  /// Webhook describes an admission webhook and the resources and operations it applies to.
  pub fn new(client_config: ::models::V1beta1WebhookClientConfig, name: String) -> V1beta1Webhook {
    V1beta1Webhook {
      client_config: client_config,
      failure_policy: None,
      name: name,
      namespace_selector: None,
      rules: None,
      side_effects: None
    }
  }

  pub fn set_client_config(&mut self, client_config: ::models::V1beta1WebhookClientConfig) {
    self.client_config = client_config;
  }

  pub fn with_client_config(mut self, client_config: ::models::V1beta1WebhookClientConfig) -> V1beta1Webhook {
    self.client_config = client_config;
    self
  }

  pub fn client_config(&self) -> &::models::V1beta1WebhookClientConfig {
    &self.client_config
  }


  pub fn set_failure_policy(&mut self, failure_policy: String) {
    self.failure_policy = Some(failure_policy);
  }

  pub fn with_failure_policy(mut self, failure_policy: String) -> V1beta1Webhook {
    self.failure_policy = Some(failure_policy);
    self
  }

  pub fn failure_policy(&self) -> Option<&String> {
    self.failure_policy.as_ref()
  }

  pub fn reset_failure_policy(&mut self) {
    self.failure_policy = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> V1beta1Webhook {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_namespace_selector(&mut self, namespace_selector: ::models::V1LabelSelector) {
    self.namespace_selector = Some(namespace_selector);
  }

  pub fn with_namespace_selector(mut self, namespace_selector: ::models::V1LabelSelector) -> V1beta1Webhook {
    self.namespace_selector = Some(namespace_selector);
    self
  }

  pub fn namespace_selector(&self) -> Option<&::models::V1LabelSelector> {
    self.namespace_selector.as_ref()
  }

  pub fn reset_namespace_selector(&mut self) {
    self.namespace_selector = None;
  }

  pub fn set_rules(&mut self, rules: Vec<::models::V1beta1RuleWithOperations>) {
    self.rules = Some(rules);
  }

  pub fn with_rules(mut self, rules: Vec<::models::V1beta1RuleWithOperations>) -> V1beta1Webhook {
    self.rules = Some(rules);
    self
  }

  pub fn rules(&self) -> Option<&Vec<::models::V1beta1RuleWithOperations>> {
    self.rules.as_ref()
  }

  pub fn reset_rules(&mut self) {
    self.rules = None;
  }

  pub fn set_side_effects(&mut self, side_effects: String) {
    self.side_effects = Some(side_effects);
  }

  pub fn with_side_effects(mut self, side_effects: String) -> V1beta1Webhook {
    self.side_effects = Some(side_effects);
    self
  }

  pub fn side_effects(&self) -> Option<&String> {
    self.side_effects.as_ref()
  }

  pub fn reset_side_effects(&mut self) {
    self.side_effects = None;
  }

}



