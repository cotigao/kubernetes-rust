/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1CustomResourceDefinitionNames : CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1CustomResourceDefinitionNames {
  /// Categories is a list of grouped resources custom resources belong to (e.g. 'all')
  #[serde(rename = "categories")]
  categories: Option<Vec<String>>,
  /// Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
  #[serde(rename = "kind")]
  kind: String,
  /// ListKind is the serialized kind of the list for this resource.  Defaults to <kind>List.
  #[serde(rename = "listKind")]
  list_kind: Option<String>,
  /// Plural is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration too: plural.group and it must be all lowercase.
  #[serde(rename = "plural")]
  plural: String,
  /// ShortNames are short names for the resource.  It must be all lowercase.
  #[serde(rename = "shortNames")]
  short_names: Option<Vec<String>>,
  /// Singular is the singular name of the resource.  It must be all lowercase  Defaults to lowercased <kind>
  #[serde(rename = "singular")]
  singular: Option<String>
}

impl V1beta1CustomResourceDefinitionNames {
  /// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
  pub fn new(kind: String, plural: String) -> V1beta1CustomResourceDefinitionNames {
    V1beta1CustomResourceDefinitionNames {
      categories: None,
      kind: kind,
      list_kind: None,
      plural: plural,
      short_names: None,
      singular: None
    }
  }

  pub fn set_categories(&mut self, categories: Vec<String>) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: Vec<String>) -> V1beta1CustomResourceDefinitionNames {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&Vec<String>> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = kind;
  }

  pub fn with_kind(mut self, kind: String) -> V1beta1CustomResourceDefinitionNames {
    self.kind = kind;
    self
  }

  pub fn kind(&self) -> &String {
    &self.kind
  }


  pub fn set_list_kind(&mut self, list_kind: String) {
    self.list_kind = Some(list_kind);
  }

  pub fn with_list_kind(mut self, list_kind: String) -> V1beta1CustomResourceDefinitionNames {
    self.list_kind = Some(list_kind);
    self
  }

  pub fn list_kind(&self) -> Option<&String> {
    self.list_kind.as_ref()
  }

  pub fn reset_list_kind(&mut self) {
    self.list_kind = None;
  }

  pub fn set_plural(&mut self, plural: String) {
    self.plural = plural;
  }

  pub fn with_plural(mut self, plural: String) -> V1beta1CustomResourceDefinitionNames {
    self.plural = plural;
    self
  }

  pub fn plural(&self) -> &String {
    &self.plural
  }


  pub fn set_short_names(&mut self, short_names: Vec<String>) {
    self.short_names = Some(short_names);
  }

  pub fn with_short_names(mut self, short_names: Vec<String>) -> V1beta1CustomResourceDefinitionNames {
    self.short_names = Some(short_names);
    self
  }

  pub fn short_names(&self) -> Option<&Vec<String>> {
    self.short_names.as_ref()
  }

  pub fn reset_short_names(&mut self) {
    self.short_names = None;
  }

  pub fn set_singular(&mut self, singular: String) {
    self.singular = Some(singular);
  }

  pub fn with_singular(mut self, singular: String) -> V1beta1CustomResourceDefinitionNames {
    self.singular = Some(singular);
    self
  }

  pub fn singular(&self) -> Option<&String> {
    self.singular.as_ref()
  }

  pub fn reset_singular(&mut self) {
    self.singular = None;
  }

}



