/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ExtensionsV1beta1ScaleStatus : represents the current status of a scale subresource.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExtensionsV1beta1ScaleStatus {
  /// actual number of observed instances of the scaled object.
  #[serde(rename = "replicas")]
  replicas: i32,
  /// label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
  #[serde(rename = "selector")]
  selector: Option<::std::collections::HashMap<String, String>>,
  /// label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  #[serde(rename = "targetSelector")]
  target_selector: Option<String>
}

impl ExtensionsV1beta1ScaleStatus {
  /// represents the current status of a scale subresource.
  pub fn new(replicas: i32) -> ExtensionsV1beta1ScaleStatus {
    ExtensionsV1beta1ScaleStatus {
      replicas: replicas,
      selector: None,
      target_selector: None
    }
  }

  pub fn set_replicas(&mut self, replicas: i32) {
    self.replicas = replicas;
  }

  pub fn with_replicas(mut self, replicas: i32) -> ExtensionsV1beta1ScaleStatus {
    self.replicas = replicas;
    self
  }

  pub fn replicas(&self) -> &i32 {
    &self.replicas
  }


  pub fn set_selector(&mut self, selector: ::std::collections::HashMap<String, String>) {
    self.selector = Some(selector);
  }

  pub fn with_selector(mut self, selector: ::std::collections::HashMap<String, String>) -> ExtensionsV1beta1ScaleStatus {
    self.selector = Some(selector);
    self
  }

  pub fn selector(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.selector.as_ref()
  }

  pub fn reset_selector(&mut self) {
    self.selector = None;
  }

  pub fn set_target_selector(&mut self, target_selector: String) {
    self.target_selector = Some(target_selector);
  }

  pub fn with_target_selector(mut self, target_selector: String) -> ExtensionsV1beta1ScaleStatus {
    self.target_selector = Some(target_selector);
    self
  }

  pub fn target_selector(&self) -> Option<&String> {
    self.target_selector.as_ref()
  }

  pub fn reset_target_selector(&mut self) {
    self.target_selector = None;
  }

}



