/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V2beta1ExternalMetricSource : ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2beta1ExternalMetricSource {
  /// metricName is the name of the metric in question.
  #[serde(rename = "metricName")]
  metric_name: String,
  /// metricSelector is used to identify a specific time series within a given metric.
  #[serde(rename = "metricSelector")]
  metric_selector: Option<::models::V1LabelSelector>,
  /// targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
  #[serde(rename = "targetAverageValue")]
  target_average_value: Option<String>,
  /// targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
  #[serde(rename = "targetValue")]
  target_value: Option<String>
}

impl V2beta1ExternalMetricSource {
  /// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set.
  pub fn new(metric_name: String) -> V2beta1ExternalMetricSource {
    V2beta1ExternalMetricSource {
      metric_name: metric_name,
      metric_selector: None,
      target_average_value: None,
      target_value: None
    }
  }

  pub fn set_metric_name(&mut self, metric_name: String) {
    self.metric_name = metric_name;
  }

  pub fn with_metric_name(mut self, metric_name: String) -> V2beta1ExternalMetricSource {
    self.metric_name = metric_name;
    self
  }

  pub fn metric_name(&self) -> &String {
    &self.metric_name
  }


  pub fn set_metric_selector(&mut self, metric_selector: ::models::V1LabelSelector) {
    self.metric_selector = Some(metric_selector);
  }

  pub fn with_metric_selector(mut self, metric_selector: ::models::V1LabelSelector) -> V2beta1ExternalMetricSource {
    self.metric_selector = Some(metric_selector);
    self
  }

  pub fn metric_selector(&self) -> Option<&::models::V1LabelSelector> {
    self.metric_selector.as_ref()
  }

  pub fn reset_metric_selector(&mut self) {
    self.metric_selector = None;
  }

  pub fn set_target_average_value(&mut self, target_average_value: String) {
    self.target_average_value = Some(target_average_value);
  }

  pub fn with_target_average_value(mut self, target_average_value: String) -> V2beta1ExternalMetricSource {
    self.target_average_value = Some(target_average_value);
    self
  }

  pub fn target_average_value(&self) -> Option<&String> {
    self.target_average_value.as_ref()
  }

  pub fn reset_target_average_value(&mut self) {
    self.target_average_value = None;
  }

  pub fn set_target_value(&mut self, target_value: String) {
    self.target_value = Some(target_value);
  }

  pub fn with_target_value(mut self, target_value: String) -> V2beta1ExternalMetricSource {
    self.target_value = Some(target_value);
    self
  }

  pub fn target_value(&self) -> Option<&String> {
    self.target_value.as_ref()
  }

  pub fn reset_target_value(&mut self) {
    self.target_value = None;
  }

}



