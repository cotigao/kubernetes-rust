/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1EventSeries : EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1EventSeries {
  /// Number of occurrences in this series up to the last heartbeat time
  #[serde(rename = "count")]
  count: i32,
  /// Time when last Event from the series was seen before last heartbeat.
  #[serde(rename = "lastObservedTime")]
  last_observed_time: String,
  /// Information whether this series is ongoing or finished.
  #[serde(rename = "state")]
  state: String
}

impl V1beta1EventSeries {
  /// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
  pub fn new(count: i32, last_observed_time: String, state: String) -> V1beta1EventSeries {
    V1beta1EventSeries {
      count: count,
      last_observed_time: last_observed_time,
      state: state
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = count;
  }

  pub fn with_count(mut self, count: i32) -> V1beta1EventSeries {
    self.count = count;
    self
  }

  pub fn count(&self) -> &i32 {
    &self.count
  }


  pub fn set_last_observed_time(&mut self, last_observed_time: String) {
    self.last_observed_time = last_observed_time;
  }

  pub fn with_last_observed_time(mut self, last_observed_time: String) -> V1beta1EventSeries {
    self.last_observed_time = last_observed_time;
    self
  }

  pub fn last_observed_time(&self) -> &String {
    &self.last_observed_time
  }


  pub fn set_state(&mut self, state: String) {
    self.state = state;
  }

  pub fn with_state(mut self, state: String) -> V1beta1EventSeries {
    self.state = state;
    self
  }

  pub fn state(&self) -> &String {
    &self.state
  }


}



