/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApiV1DownwardApiVolumeFile : DownwardAPIVolumeFile represents information to create the file containing the pod field

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
  /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
  #[serde(rename = "fieldRef")]
  field_ref: Option<::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector>,
  /// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  #[serde(rename = "mode")]
  mode: Option<i32>,
  /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  #[serde(rename = "path")]
  path: String,
  /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  #[serde(rename = "resourceFieldRef")]
  resource_field_ref: Option<::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector>
}

impl IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
  /// DownwardAPIVolumeFile represents information to create the file containing the pod field
  pub fn new(path: String) -> IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
    IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
      field_ref: None,
      mode: None,
      path: path,
      resource_field_ref: None
    }
  }

  pub fn set_field_ref(&mut self, field_ref: ::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector) {
    self.field_ref = Some(field_ref);
  }

  pub fn with_field_ref(mut self, field_ref: ::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector) -> IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
    self.field_ref = Some(field_ref);
    self
  }

  pub fn field_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector> {
    self.field_ref.as_ref()
  }

  pub fn reset_field_ref(&mut self) {
    self.field_ref = None;
  }

  pub fn set_mode(&mut self, mode: i32) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: i32) -> IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&i32> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_resource_field_ref(&mut self, resource_field_ref: ::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector) {
    self.resource_field_ref = Some(resource_field_ref);
  }

  pub fn with_resource_field_ref(mut self, resource_field_ref: ::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector) -> IoK8sKubernetesPkgApiV1DownwardApiVolumeFile {
    self.resource_field_ref = Some(resource_field_ref);
    self
  }

  pub fn resource_field_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector> {
    self.resource_field_ref.as_ref()
  }

  pub fn reset_resource_field_ref(&mut self) {
    self.resource_field_ref = None;
  }

}



