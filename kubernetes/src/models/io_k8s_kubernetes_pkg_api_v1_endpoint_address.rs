/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1EndpointAddress : EndpointAddress is a tuple that describes single IP address.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1EndpointAddress {
  /// The Hostname of this endpoint
  #[serde(rename = "hostname")]
  hostname: Option<String>,
  /// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
  #[serde(rename = "ip")]
  ip: String,
  /// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
  #[serde(rename = "nodeName")]
  node_name: Option<String>,
  #[serde(rename = "targetRef")]
  target_ref: Option<::models::IoK8sKubernetesPkgApiV1ObjectReference>
}

impl IoK8sKubernetesPkgApiV1EndpointAddress {
  /// EndpointAddress is a tuple that describes single IP address.
  pub fn new(ip: String) -> IoK8sKubernetesPkgApiV1EndpointAddress {
    IoK8sKubernetesPkgApiV1EndpointAddress {
      hostname: None,
      ip: ip,
      node_name: None,
      target_ref: None
    }
  }

  pub fn set_hostname(&mut self, hostname: String) {
    self.hostname = Some(hostname);
  }

  pub fn with_hostname(mut self, hostname: String) -> IoK8sKubernetesPkgApiV1EndpointAddress {
    self.hostname = Some(hostname);
    self
  }

  pub fn hostname(&self) -> Option<&String> {
    self.hostname.as_ref()
  }

  pub fn reset_hostname(&mut self) {
    self.hostname = None;
  }

  pub fn set_ip(&mut self, ip: String) {
    self.ip = ip;
  }

  pub fn with_ip(mut self, ip: String) -> IoK8sKubernetesPkgApiV1EndpointAddress {
    self.ip = ip;
    self
  }

  pub fn ip(&self) -> &String {
    &self.ip
  }


  pub fn set_node_name(&mut self, node_name: String) {
    self.node_name = Some(node_name);
  }

  pub fn with_node_name(mut self, node_name: String) -> IoK8sKubernetesPkgApiV1EndpointAddress {
    self.node_name = Some(node_name);
    self
  }

  pub fn node_name(&self) -> Option<&String> {
    self.node_name.as_ref()
  }

  pub fn reset_node_name(&mut self) {
    self.node_name = None;
  }

  pub fn set_target_ref(&mut self, target_ref: ::models::IoK8sKubernetesPkgApiV1ObjectReference) {
    self.target_ref = Some(target_ref);
  }

  pub fn with_target_ref(mut self, target_ref: ::models::IoK8sKubernetesPkgApiV1ObjectReference) -> IoK8sKubernetesPkgApiV1EndpointAddress {
    self.target_ref = Some(target_ref);
    self
  }

  pub fn target_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ObjectReference> {
    self.target_ref.as_ref()
  }

  pub fn reset_target_ref(&mut self) {
    self.target_ref = None;
  }

}



