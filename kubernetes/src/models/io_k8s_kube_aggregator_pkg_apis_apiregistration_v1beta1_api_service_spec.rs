/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec : APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
  /// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
  #[serde(rename = "caBundle")]
  ca_bundle: String,
  /// Group is the API group name this server hosts
  #[serde(rename = "group")]
  group: Option<String>,
  /// GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
  #[serde(rename = "groupPriorityMinimum")]
  group_priority_minimum: i32,
  /// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
  #[serde(rename = "insecureSkipTLSVerify")]
  insecure_skip_tls_verify: Option<bool>,
  #[serde(rename = "service")]
  service: ::models::IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference,
  /// Version is the API version this server hosts.  For example, \"v1\"
  #[serde(rename = "version")]
  version: Option<String>,
  /// VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.
  #[serde(rename = "versionPriority")]
  version_priority: i32
}

impl IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
  /// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
  pub fn new(ca_bundle: String, group_priority_minimum: i32, service: ::models::IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference, version_priority: i32) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
      ca_bundle: ca_bundle,
      group: None,
      group_priority_minimum: group_priority_minimum,
      insecure_skip_tls_verify: None,
      service: service,
      version: None,
      version_priority: version_priority
    }
  }

  pub fn set_ca_bundle(&mut self, ca_bundle: String) {
    self.ca_bundle = ca_bundle;
  }

  pub fn with_ca_bundle(mut self, ca_bundle: String) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.ca_bundle = ca_bundle;
    self
  }

  pub fn ca_bundle(&self) -> &String {
    &self.ca_bundle
  }


  pub fn set_group(&mut self, group: String) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: String) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&String> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set_group_priority_minimum(&mut self, group_priority_minimum: i32) {
    self.group_priority_minimum = group_priority_minimum;
  }

  pub fn with_group_priority_minimum(mut self, group_priority_minimum: i32) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.group_priority_minimum = group_priority_minimum;
    self
  }

  pub fn group_priority_minimum(&self) -> &i32 {
    &self.group_priority_minimum
  }


  pub fn set_insecure_skip_tls_verify(&mut self, insecure_skip_tls_verify: bool) {
    self.insecure_skip_tls_verify = Some(insecure_skip_tls_verify);
  }

  pub fn with_insecure_skip_tls_verify(mut self, insecure_skip_tls_verify: bool) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.insecure_skip_tls_verify = Some(insecure_skip_tls_verify);
    self
  }

  pub fn insecure_skip_tls_verify(&self) -> Option<&bool> {
    self.insecure_skip_tls_verify.as_ref()
  }

  pub fn reset_insecure_skip_tls_verify(&mut self) {
    self.insecure_skip_tls_verify = None;
  }

  pub fn set_service(&mut self, service: ::models::IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference) {
    self.service = service;
  }

  pub fn with_service(mut self, service: ::models::IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.service = service;
    self
  }

  pub fn service(&self) -> &::models::IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference {
    &self.service
  }


  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_version_priority(&mut self, version_priority: i32) {
    self.version_priority = version_priority;
  }

  pub fn with_version_priority(mut self, version_priority: i32) -> IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ApiServiceSpec {
    self.version_priority = version_priority;
    self
  }

  pub fn version_priority(&self) -> &i32 {
    &self.version_priority
  }


}



