/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V2beta2ResourceMetricSource : ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2beta2ResourceMetricSource {
  /// name is the name of the resource in question.
  #[serde(rename = "name")]
  name: String,
  /// target specifies the target value for the given metric
  #[serde(rename = "target")]
  target: ::models::V2beta2MetricTarget
}

impl V2beta2ResourceMetricSource {
  /// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.
  pub fn new(name: String, target: ::models::V2beta2MetricTarget) -> V2beta2ResourceMetricSource {
    V2beta2ResourceMetricSource {
      name: name,
      target: target
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> V2beta2ResourceMetricSource {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_target(&mut self, target: ::models::V2beta2MetricTarget) {
    self.target = target;
  }

  pub fn with_target(mut self, target: ::models::V2beta2MetricTarget) -> V2beta2ResourceMetricSource {
    self.target = target;
    self
  }

  pub fn target(&self) -> &::models::V2beta2MetricTarget {
    &self.target
  }


}



