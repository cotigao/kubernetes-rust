/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1LabelSelectorRequirement : A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1LabelSelectorRequirement {
  /// key is the label key that the selector applies to.
  #[serde(rename = "key")]
  key: String,
  /// operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.
  #[serde(rename = "operator")]
  operator: String,
  /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  #[serde(rename = "values")]
  values: Option<Vec<String>>
}

impl V1LabelSelectorRequirement {
  /// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
  pub fn new(key: String, operator: String) -> V1LabelSelectorRequirement {
    V1LabelSelectorRequirement {
      key: key,
      operator: operator,
      values: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> V1LabelSelectorRequirement {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }


  pub fn set_operator(&mut self, operator: String) {
    self.operator = operator;
  }

  pub fn with_operator(mut self, operator: String) -> V1LabelSelectorRequirement {
    self.operator = operator;
    self
  }

  pub fn operator(&self) -> &String {
    &self.operator
  }


  pub fn set_values(&mut self, values: Vec<String>) {
    self.values = Some(values);
  }

  pub fn with_values(mut self, values: Vec<String>) -> V1LabelSelectorRequirement {
    self.values = Some(values);
    self
  }

  pub fn values(&self) -> Option<&Vec<String>> {
    self.values.as_ref()
  }

  pub fn reset_values(&mut self) {
    self.values = None;
  }

}



