/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1EnvVar : EnvVar represents an environment variable present in a Container.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1EnvVar {
  /// Name of the environment variable. Must be a C_IDENTIFIER.
  #[serde(rename = "name")]
  name: String,
  /// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".
  #[serde(rename = "value")]
  value: Option<String>,
  #[serde(rename = "valueFrom")]
  value_from: Option<::models::IoK8sKubernetesPkgApiV1EnvVarSource>
}

impl IoK8sKubernetesPkgApiV1EnvVar {
  /// EnvVar represents an environment variable present in a Container.
  pub fn new(name: String) -> IoK8sKubernetesPkgApiV1EnvVar {
    IoK8sKubernetesPkgApiV1EnvVar {
      name: name,
      value: None,
      value_from: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sKubernetesPkgApiV1EnvVar {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> IoK8sKubernetesPkgApiV1EnvVar {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

  pub fn set_value_from(&mut self, value_from: ::models::IoK8sKubernetesPkgApiV1EnvVarSource) {
    self.value_from = Some(value_from);
  }

  pub fn with_value_from(mut self, value_from: ::models::IoK8sKubernetesPkgApiV1EnvVarSource) -> IoK8sKubernetesPkgApiV1EnvVar {
    self.value_from = Some(value_from);
    self
  }

  pub fn value_from(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1EnvVarSource> {
    self.value_from.as_ref()
  }

  pub fn reset_value_from(&mut self) {
    self.value_from = None;
  }

}



