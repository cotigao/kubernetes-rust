/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V2beta2MetricValueStatus : MetricValueStatus holds the current value for a metric

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2beta2MetricValueStatus {
  /// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  #[serde(rename = "averageUtilization")]
  average_utilization: Option<i32>,
  /// averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
  #[serde(rename = "averageValue")]
  average_value: Option<String>,
  /// value is the current value of the metric (as a quantity).
  #[serde(rename = "value")]
  value: Option<String>
}

impl V2beta2MetricValueStatus {
  /// MetricValueStatus holds the current value for a metric
  pub fn new() -> V2beta2MetricValueStatus {
    V2beta2MetricValueStatus {
      average_utilization: None,
      average_value: None,
      value: None
    }
  }

  pub fn set_average_utilization(&mut self, average_utilization: i32) {
    self.average_utilization = Some(average_utilization);
  }

  pub fn with_average_utilization(mut self, average_utilization: i32) -> V2beta2MetricValueStatus {
    self.average_utilization = Some(average_utilization);
    self
  }

  pub fn average_utilization(&self) -> Option<&i32> {
    self.average_utilization.as_ref()
  }

  pub fn reset_average_utilization(&mut self) {
    self.average_utilization = None;
  }

  pub fn set_average_value(&mut self, average_value: String) {
    self.average_value = Some(average_value);
  }

  pub fn with_average_value(mut self, average_value: String) -> V2beta2MetricValueStatus {
    self.average_value = Some(average_value);
    self
  }

  pub fn average_value(&self) -> Option<&String> {
    self.average_value.as_ref()
  }

  pub fn reset_average_value(&mut self) {
    self.average_value = None;
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> V2beta2MetricValueStatus {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&String> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



