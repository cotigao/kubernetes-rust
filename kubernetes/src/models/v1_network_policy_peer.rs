/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1NetworkPolicyPeer : NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1NetworkPolicyPeer {
  /// Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
  #[serde(rename = "namespaceSelector")]
  namespace_selector: Option<::models::V1LabelSelector>,
  /// This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
  #[serde(rename = "podSelector")]
  pod_selector: Option<::models::V1LabelSelector>
}

impl V1NetworkPolicyPeer {
  /// NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.
  pub fn new() -> V1NetworkPolicyPeer {
    V1NetworkPolicyPeer {
      namespace_selector: None,
      pod_selector: None
    }
  }

  pub fn set_namespace_selector(&mut self, namespace_selector: ::models::V1LabelSelector) {
    self.namespace_selector = Some(namespace_selector);
  }

  pub fn with_namespace_selector(mut self, namespace_selector: ::models::V1LabelSelector) -> V1NetworkPolicyPeer {
    self.namespace_selector = Some(namespace_selector);
    self
  }

  pub fn namespace_selector(&self) -> Option<&::models::V1LabelSelector> {
    self.namespace_selector.as_ref()
  }

  pub fn reset_namespace_selector(&mut self) {
    self.namespace_selector = None;
  }

  pub fn set_pod_selector(&mut self, pod_selector: ::models::V1LabelSelector) {
    self.pod_selector = Some(pod_selector);
  }

  pub fn with_pod_selector(mut self, pod_selector: ::models::V1LabelSelector) -> V1NetworkPolicyPeer {
    self.pod_selector = Some(pod_selector);
    self
  }

  pub fn pod_selector(&self) -> Option<&::models::V1LabelSelector> {
    self.pod_selector.as_ref()
  }

  pub fn reset_pod_selector(&mut self) {
    self.pod_selector = None;
  }

}



