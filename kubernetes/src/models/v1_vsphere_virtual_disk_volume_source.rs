/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1VsphereVirtualDiskVolumeSource : Represents a vSphere volume resource.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1VsphereVirtualDiskVolumeSource {
  /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
  #[serde(rename = "fsType")]
  fs_type: Option<String>,
  /// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
  #[serde(rename = "storagePolicyID")]
  storage_policy_id: Option<String>,
  /// Storage Policy Based Management (SPBM) profile name.
  #[serde(rename = "storagePolicyName")]
  storage_policy_name: Option<String>,
  /// Path that identifies vSphere volume vmdk
  #[serde(rename = "volumePath")]
  volume_path: String
}

impl V1VsphereVirtualDiskVolumeSource {
  /// Represents a vSphere volume resource.
  pub fn new(volume_path: String) -> V1VsphereVirtualDiskVolumeSource {
    V1VsphereVirtualDiskVolumeSource {
      fs_type: None,
      storage_policy_id: None,
      storage_policy_name: None,
      volume_path: volume_path
    }
  }

  pub fn set_fs_type(&mut self, fs_type: String) {
    self.fs_type = Some(fs_type);
  }

  pub fn with_fs_type(mut self, fs_type: String) -> V1VsphereVirtualDiskVolumeSource {
    self.fs_type = Some(fs_type);
    self
  }

  pub fn fs_type(&self) -> Option<&String> {
    self.fs_type.as_ref()
  }

  pub fn reset_fs_type(&mut self) {
    self.fs_type = None;
  }

  pub fn set_storage_policy_id(&mut self, storage_policy_id: String) {
    self.storage_policy_id = Some(storage_policy_id);
  }

  pub fn with_storage_policy_id(mut self, storage_policy_id: String) -> V1VsphereVirtualDiskVolumeSource {
    self.storage_policy_id = Some(storage_policy_id);
    self
  }

  pub fn storage_policy_id(&self) -> Option<&String> {
    self.storage_policy_id.as_ref()
  }

  pub fn reset_storage_policy_id(&mut self) {
    self.storage_policy_id = None;
  }

  pub fn set_storage_policy_name(&mut self, storage_policy_name: String) {
    self.storage_policy_name = Some(storage_policy_name);
  }

  pub fn with_storage_policy_name(mut self, storage_policy_name: String) -> V1VsphereVirtualDiskVolumeSource {
    self.storage_policy_name = Some(storage_policy_name);
    self
  }

  pub fn storage_policy_name(&self) -> Option<&String> {
    self.storage_policy_name.as_ref()
  }

  pub fn reset_storage_policy_name(&mut self) {
    self.storage_policy_name = None;
  }

  pub fn set_volume_path(&mut self, volume_path: String) {
    self.volume_path = volume_path;
  }

  pub fn with_volume_path(mut self, volume_path: String) -> V1VsphereVirtualDiskVolumeSource {
    self.volume_path = volume_path;
    self
  }

  pub fn volume_path(&self) -> &String {
    &self.volume_path
  }


}



