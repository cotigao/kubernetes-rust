/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1ApiResource : APIResource specifies the name of a resource and whether it is namespaced.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ApiResource {
  /// categories is a list of the grouped resources this resource belongs to (e.g. 'all')
  #[serde(rename = "categories")]
  categories: Option<Vec<String>>,
  /// kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
  #[serde(rename = "kind")]
  kind: String,
  /// name is the plural name of the resource.
  #[serde(rename = "name")]
  name: String,
  /// namespaced indicates if a resource is namespaced or not.
  #[serde(rename = "namespaced")]
  namespaced: bool,
  /// shortNames is a list of suggested short names of the resource.
  #[serde(rename = "shortNames")]
  short_names: Option<Vec<String>>,
  /// singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
  #[serde(rename = "singularName")]
  singular_name: String,
  /// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
  #[serde(rename = "verbs")]
  verbs: Vec<String>
}

impl V1ApiResource {
  /// APIResource specifies the name of a resource and whether it is namespaced.
  pub fn new(kind: String, name: String, namespaced: bool, singular_name: String, verbs: Vec<String>) -> V1ApiResource {
    V1ApiResource {
      categories: None,
      kind: kind,
      name: name,
      namespaced: namespaced,
      short_names: None,
      singular_name: singular_name,
      verbs: verbs
    }
  }

  pub fn set_categories(&mut self, categories: Vec<String>) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: Vec<String>) -> V1ApiResource {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&Vec<String>> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = kind;
  }

  pub fn with_kind(mut self, kind: String) -> V1ApiResource {
    self.kind = kind;
    self
  }

  pub fn kind(&self) -> &String {
    &self.kind
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> V1ApiResource {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_namespaced(&mut self, namespaced: bool) {
    self.namespaced = namespaced;
  }

  pub fn with_namespaced(mut self, namespaced: bool) -> V1ApiResource {
    self.namespaced = namespaced;
    self
  }

  pub fn namespaced(&self) -> &bool {
    &self.namespaced
  }


  pub fn set_short_names(&mut self, short_names: Vec<String>) {
    self.short_names = Some(short_names);
  }

  pub fn with_short_names(mut self, short_names: Vec<String>) -> V1ApiResource {
    self.short_names = Some(short_names);
    self
  }

  pub fn short_names(&self) -> Option<&Vec<String>> {
    self.short_names.as_ref()
  }

  pub fn reset_short_names(&mut self) {
    self.short_names = None;
  }

  pub fn set_singular_name(&mut self, singular_name: String) {
    self.singular_name = singular_name;
  }

  pub fn with_singular_name(mut self, singular_name: String) -> V1ApiResource {
    self.singular_name = singular_name;
    self
  }

  pub fn singular_name(&self) -> &String {
    &self.singular_name
  }


  pub fn set_verbs(&mut self, verbs: Vec<String>) {
    self.verbs = verbs;
  }

  pub fn with_verbs(mut self, verbs: Vec<String>) -> V1ApiResource {
    self.verbs = verbs;
    self
  }

  pub fn verbs(&self) -> &Vec<String> {
    &self.verbs
  }


}



