/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1AzureFilePersistentVolumeSource : AzureFile represents an Azure File Service mount on the host and bind mount to the pod.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AzureFilePersistentVolumeSource {
  /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  #[serde(rename = "readOnly")]
  read_only: Option<bool>,
  /// the name of secret that contains Azure Storage Account Name and Key
  #[serde(rename = "secretName")]
  secret_name: String,
  /// the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
  #[serde(rename = "secretNamespace")]
  secret_namespace: Option<String>,
  /// Share Name
  #[serde(rename = "shareName")]
  share_name: String
}

impl V1AzureFilePersistentVolumeSource {
  /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
  pub fn new(secret_name: String, share_name: String) -> V1AzureFilePersistentVolumeSource {
    V1AzureFilePersistentVolumeSource {
      read_only: None,
      secret_name: secret_name,
      secret_namespace: None,
      share_name: share_name
    }
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> V1AzureFilePersistentVolumeSource {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

  pub fn set_secret_name(&mut self, secret_name: String) {
    self.secret_name = secret_name;
  }

  pub fn with_secret_name(mut self, secret_name: String) -> V1AzureFilePersistentVolumeSource {
    self.secret_name = secret_name;
    self
  }

  pub fn secret_name(&self) -> &String {
    &self.secret_name
  }


  pub fn set_secret_namespace(&mut self, secret_namespace: String) {
    self.secret_namespace = Some(secret_namespace);
  }

  pub fn with_secret_namespace(mut self, secret_namespace: String) -> V1AzureFilePersistentVolumeSource {
    self.secret_namespace = Some(secret_namespace);
    self
  }

  pub fn secret_namespace(&self) -> Option<&String> {
    self.secret_namespace.as_ref()
  }

  pub fn reset_secret_namespace(&mut self) {
    self.secret_namespace = None;
  }

  pub fn set_share_name(&mut self, share_name: String) {
    self.share_name = share_name;
  }

  pub fn with_share_name(mut self, share_name: String) -> V1AzureFilePersistentVolumeSource {
    self.share_name = share_name;
    self
  }

  pub fn share_name(&self) -> &String {
    &self.share_name
  }


}



