/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus : current status of a horizontal pod autoscaler

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
  /// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
  #[serde(rename = "currentCPUUtilizationPercentage")]
  current_cpu_utilization_percentage: Option<i32>,
  /// current number of replicas of pods managed by this autoscaler.
  #[serde(rename = "currentReplicas")]
  current_replicas: i32,
  /// desired number of replicas of pods managed by this autoscaler.
  #[serde(rename = "desiredReplicas")]
  desired_replicas: i32,
  #[serde(rename = "lastScaleTime")]
  last_scale_time: Option<String>,
  /// most recent generation observed by this autoscaler.
  #[serde(rename = "observedGeneration")]
  observed_generation: Option<i64>
}

impl IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
  /// current status of a horizontal pod autoscaler
  pub fn new(current_replicas: i32, desired_replicas: i32) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
      current_cpu_utilization_percentage: None,
      current_replicas: current_replicas,
      desired_replicas: desired_replicas,
      last_scale_time: None,
      observed_generation: None
    }
  }

  pub fn set_current_cpu_utilization_percentage(&mut self, current_cpu_utilization_percentage: i32) {
    self.current_cpu_utilization_percentage = Some(current_cpu_utilization_percentage);
  }

  pub fn with_current_cpu_utilization_percentage(mut self, current_cpu_utilization_percentage: i32) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    self.current_cpu_utilization_percentage = Some(current_cpu_utilization_percentage);
    self
  }

  pub fn current_cpu_utilization_percentage(&self) -> Option<&i32> {
    self.current_cpu_utilization_percentage.as_ref()
  }

  pub fn reset_current_cpu_utilization_percentage(&mut self) {
    self.current_cpu_utilization_percentage = None;
  }

  pub fn set_current_replicas(&mut self, current_replicas: i32) {
    self.current_replicas = current_replicas;
  }

  pub fn with_current_replicas(mut self, current_replicas: i32) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    self.current_replicas = current_replicas;
    self
  }

  pub fn current_replicas(&self) -> &i32 {
    &self.current_replicas
  }


  pub fn set_desired_replicas(&mut self, desired_replicas: i32) {
    self.desired_replicas = desired_replicas;
  }

  pub fn with_desired_replicas(mut self, desired_replicas: i32) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    self.desired_replicas = desired_replicas;
    self
  }

  pub fn desired_replicas(&self) -> &i32 {
    &self.desired_replicas
  }


  pub fn set_last_scale_time(&mut self, last_scale_time: String) {
    self.last_scale_time = Some(last_scale_time);
  }

  pub fn with_last_scale_time(mut self, last_scale_time: String) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    self.last_scale_time = Some(last_scale_time);
    self
  }

  pub fn last_scale_time(&self) -> Option<&String> {
    self.last_scale_time.as_ref()
  }

  pub fn reset_last_scale_time(&mut self) {
    self.last_scale_time = None;
  }

  pub fn set_observed_generation(&mut self, observed_generation: i64) {
    self.observed_generation = Some(observed_generation);
  }

  pub fn with_observed_generation(mut self, observed_generation: i64) -> IoK8sKubernetesPkgApisAutoscalingV1HorizontalPodAutoscalerStatus {
    self.observed_generation = Some(observed_generation);
    self
  }

  pub fn observed_generation(&self) -> Option<&i64> {
    self.observed_generation.as_ref()
  }

  pub fn reset_observed_generation(&mut self) {
    self.observed_generation = None;
  }

}



