/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec : IngressSpec describes the Ingress the user wishes to exist.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
  /// A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
  #[serde(rename = "backend")]
  backend: Option<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend>,
  /// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
  #[serde(rename = "rules")]
  rules: Option<Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule>>,
  /// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
  #[serde(rename = "tls")]
  tls: Option<Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressTls>>
}

impl IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
  /// IngressSpec describes the Ingress the user wishes to exist.
  pub fn new() -> IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
    IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
      backend: None,
      rules: None,
      tls: None
    }
  }

  pub fn set_backend(&mut self, backend: ::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend) {
    self.backend = Some(backend);
  }

  pub fn with_backend(mut self, backend: ::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend) -> IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
    self.backend = Some(backend);
    self
  }

  pub fn backend(&self) -> Option<&::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressBackend> {
    self.backend.as_ref()
  }

  pub fn reset_backend(&mut self) {
    self.backend = None;
  }

  pub fn set_rules(&mut self, rules: Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule>) {
    self.rules = Some(rules);
  }

  pub fn with_rules(mut self, rules: Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule>) -> IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
    self.rules = Some(rules);
    self
  }

  pub fn rules(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressRule>> {
    self.rules.as_ref()
  }

  pub fn reset_rules(&mut self) {
    self.rules = None;
  }

  pub fn set_tls(&mut self, tls: Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressTls>) {
    self.tls = Some(tls);
  }

  pub fn with_tls(mut self, tls: Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressTls>) -> IoK8sKubernetesPkgApisExtensionsV1beta1IngressSpec {
    self.tls = Some(tls);
    self
  }

  pub fn tls(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApisExtensionsV1beta1IngressTls>> {
    self.tls.as_ref()
  }

  pub fn reset_tls(&mut self) {
    self.tls = None;
  }

}



