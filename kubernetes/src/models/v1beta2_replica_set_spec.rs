/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta2ReplicaSetSpec : ReplicaSetSpec is the specification of a ReplicaSet.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta2ReplicaSetSpec {
  /// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
  #[serde(rename = "minReadySeconds")]
  min_ready_seconds: Option<i32>,
  /// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
  #[serde(rename = "replicas")]
  replicas: Option<i32>,
  /// Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  #[serde(rename = "selector")]
  selector: ::models::V1LabelSelector,
  /// Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
  #[serde(rename = "template")]
  template: Option<::models::V1PodTemplateSpec>
}

impl V1beta2ReplicaSetSpec {
  /// ReplicaSetSpec is the specification of a ReplicaSet.
  pub fn new(selector: ::models::V1LabelSelector) -> V1beta2ReplicaSetSpec {
    V1beta2ReplicaSetSpec {
      min_ready_seconds: None,
      replicas: None,
      selector: selector,
      template: None
    }
  }

  pub fn set_min_ready_seconds(&mut self, min_ready_seconds: i32) {
    self.min_ready_seconds = Some(min_ready_seconds);
  }

  pub fn with_min_ready_seconds(mut self, min_ready_seconds: i32) -> V1beta2ReplicaSetSpec {
    self.min_ready_seconds = Some(min_ready_seconds);
    self
  }

  pub fn min_ready_seconds(&self) -> Option<&i32> {
    self.min_ready_seconds.as_ref()
  }

  pub fn reset_min_ready_seconds(&mut self) {
    self.min_ready_seconds = None;
  }

  pub fn set_replicas(&mut self, replicas: i32) {
    self.replicas = Some(replicas);
  }

  pub fn with_replicas(mut self, replicas: i32) -> V1beta2ReplicaSetSpec {
    self.replicas = Some(replicas);
    self
  }

  pub fn replicas(&self) -> Option<&i32> {
    self.replicas.as_ref()
  }

  pub fn reset_replicas(&mut self) {
    self.replicas = None;
  }

  pub fn set_selector(&mut self, selector: ::models::V1LabelSelector) {
    self.selector = selector;
  }

  pub fn with_selector(mut self, selector: ::models::V1LabelSelector) -> V1beta2ReplicaSetSpec {
    self.selector = selector;
    self
  }

  pub fn selector(&self) -> &::models::V1LabelSelector {
    &self.selector
  }


  pub fn set_template(&mut self, template: ::models::V1PodTemplateSpec) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: ::models::V1PodTemplateSpec) -> V1beta2ReplicaSetSpec {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&::models::V1PodTemplateSpec> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

}



