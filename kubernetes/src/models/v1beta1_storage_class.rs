/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1StorageClass : StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.  StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1StorageClass {
  /// AllowVolumeExpansion shows whether the storage class allow volume expand
  #[serde(rename = "allowVolumeExpansion")]
  allow_volume_expansion: Option<bool>,
  /// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
  #[serde(rename = "allowedTopologies")]
  allowed_topologies: Option<Vec<::models::V1TopologySelectorTerm>>,
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  #[serde(rename = "metadata")]
  metadata: Option<::models::V1ObjectMeta>,
  /// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.
  #[serde(rename = "mountOptions")]
  mount_options: Option<Vec<String>>,
  /// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
  #[serde(rename = "parameters")]
  parameters: Option<::std::collections::HashMap<String, String>>,
  /// Provisioner indicates the type of the provisioner.
  #[serde(rename = "provisioner")]
  provisioner: String,
  /// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
  #[serde(rename = "reclaimPolicy")]
  reclaim_policy: Option<String>,
  /// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
  #[serde(rename = "volumeBindingMode")]
  volume_binding_mode: Option<String>
}

impl V1beta1StorageClass {
  /// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.  StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
  pub fn new(provisioner: String) -> V1beta1StorageClass {
    V1beta1StorageClass {
      allow_volume_expansion: None,
      allowed_topologies: None,
      api_version: None,
      kind: None,
      metadata: None,
      mount_options: None,
      parameters: None,
      provisioner: provisioner,
      reclaim_policy: None,
      volume_binding_mode: None
    }
  }

  pub fn set_allow_volume_expansion(&mut self, allow_volume_expansion: bool) {
    self.allow_volume_expansion = Some(allow_volume_expansion);
  }

  pub fn with_allow_volume_expansion(mut self, allow_volume_expansion: bool) -> V1beta1StorageClass {
    self.allow_volume_expansion = Some(allow_volume_expansion);
    self
  }

  pub fn allow_volume_expansion(&self) -> Option<&bool> {
    self.allow_volume_expansion.as_ref()
  }

  pub fn reset_allow_volume_expansion(&mut self) {
    self.allow_volume_expansion = None;
  }

  pub fn set_allowed_topologies(&mut self, allowed_topologies: Vec<::models::V1TopologySelectorTerm>) {
    self.allowed_topologies = Some(allowed_topologies);
  }

  pub fn with_allowed_topologies(mut self, allowed_topologies: Vec<::models::V1TopologySelectorTerm>) -> V1beta1StorageClass {
    self.allowed_topologies = Some(allowed_topologies);
    self
  }

  pub fn allowed_topologies(&self) -> Option<&Vec<::models::V1TopologySelectorTerm>> {
    self.allowed_topologies.as_ref()
  }

  pub fn reset_allowed_topologies(&mut self) {
    self.allowed_topologies = None;
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> V1beta1StorageClass {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> V1beta1StorageClass {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_metadata(&mut self, metadata: ::models::V1ObjectMeta) {
    self.metadata = Some(metadata);
  }

  pub fn with_metadata(mut self, metadata: ::models::V1ObjectMeta) -> V1beta1StorageClass {
    self.metadata = Some(metadata);
    self
  }

  pub fn metadata(&self) -> Option<&::models::V1ObjectMeta> {
    self.metadata.as_ref()
  }

  pub fn reset_metadata(&mut self) {
    self.metadata = None;
  }

  pub fn set_mount_options(&mut self, mount_options: Vec<String>) {
    self.mount_options = Some(mount_options);
  }

  pub fn with_mount_options(mut self, mount_options: Vec<String>) -> V1beta1StorageClass {
    self.mount_options = Some(mount_options);
    self
  }

  pub fn mount_options(&self) -> Option<&Vec<String>> {
    self.mount_options.as_ref()
  }

  pub fn reset_mount_options(&mut self) {
    self.mount_options = None;
  }

  pub fn set_parameters(&mut self, parameters: ::std::collections::HashMap<String, String>) {
    self.parameters = Some(parameters);
  }

  pub fn with_parameters(mut self, parameters: ::std::collections::HashMap<String, String>) -> V1beta1StorageClass {
    self.parameters = Some(parameters);
    self
  }

  pub fn parameters(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.parameters.as_ref()
  }

  pub fn reset_parameters(&mut self) {
    self.parameters = None;
  }

  pub fn set_provisioner(&mut self, provisioner: String) {
    self.provisioner = provisioner;
  }

  pub fn with_provisioner(mut self, provisioner: String) -> V1beta1StorageClass {
    self.provisioner = provisioner;
    self
  }

  pub fn provisioner(&self) -> &String {
    &self.provisioner
  }


  pub fn set_reclaim_policy(&mut self, reclaim_policy: String) {
    self.reclaim_policy = Some(reclaim_policy);
  }

  pub fn with_reclaim_policy(mut self, reclaim_policy: String) -> V1beta1StorageClass {
    self.reclaim_policy = Some(reclaim_policy);
    self
  }

  pub fn reclaim_policy(&self) -> Option<&String> {
    self.reclaim_policy.as_ref()
  }

  pub fn reset_reclaim_policy(&mut self) {
    self.reclaim_policy = None;
  }

  pub fn set_volume_binding_mode(&mut self, volume_binding_mode: String) {
    self.volume_binding_mode = Some(volume_binding_mode);
  }

  pub fn with_volume_binding_mode(mut self, volume_binding_mode: String) -> V1beta1StorageClass {
    self.volume_binding_mode = Some(volume_binding_mode);
    self
  }

  pub fn volume_binding_mode(&self) -> Option<&String> {
    self.volume_binding_mode.as_ref()
  }

  pub fn reset_volume_binding_mode(&mut self) {
    self.volume_binding_mode = None;
  }

}



