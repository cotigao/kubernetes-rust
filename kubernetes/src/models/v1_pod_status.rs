/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1PodStatus : PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1PodStatus {
  /// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  #[serde(rename = "conditions")]
  conditions: Option<Vec<::models::V1PodCondition>>,
  /// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  #[serde(rename = "containerStatuses")]
  container_statuses: Option<Vec<::models::V1ContainerStatus>>,
  /// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
  #[serde(rename = "hostIP")]
  host_ip: Option<String>,
  /// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  #[serde(rename = "initContainerStatuses")]
  init_container_statuses: Option<Vec<::models::V1ContainerStatus>>,
  /// A human readable message indicating details about why the pod is in this condition.
  #[serde(rename = "message")]
  message: Option<String>,
  /// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
  #[serde(rename = "nominatedNodeName")]
  nominated_node_name: Option<String>,
  /// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
  #[serde(rename = "phase")]
  phase: Option<String>,
  /// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
  #[serde(rename = "podIP")]
  pod_ip: Option<String>,
  /// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
  #[serde(rename = "qosClass")]
  qos_class: Option<String>,
  /// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
  #[serde(rename = "reason")]
  reason: Option<String>,
  /// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
  #[serde(rename = "startTime")]
  start_time: Option<String>
}

impl V1PodStatus {
  /// PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
  pub fn new() -> V1PodStatus {
    V1PodStatus {
      conditions: None,
      container_statuses: None,
      host_ip: None,
      init_container_statuses: None,
      message: None,
      nominated_node_name: None,
      phase: None,
      pod_ip: None,
      qos_class: None,
      reason: None,
      start_time: None
    }
  }

  pub fn set_conditions(&mut self, conditions: Vec<::models::V1PodCondition>) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: Vec<::models::V1PodCondition>) -> V1PodStatus {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&Vec<::models::V1PodCondition>> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_container_statuses(&mut self, container_statuses: Vec<::models::V1ContainerStatus>) {
    self.container_statuses = Some(container_statuses);
  }

  pub fn with_container_statuses(mut self, container_statuses: Vec<::models::V1ContainerStatus>) -> V1PodStatus {
    self.container_statuses = Some(container_statuses);
    self
  }

  pub fn container_statuses(&self) -> Option<&Vec<::models::V1ContainerStatus>> {
    self.container_statuses.as_ref()
  }

  pub fn reset_container_statuses(&mut self) {
    self.container_statuses = None;
  }

  pub fn set_host_ip(&mut self, host_ip: String) {
    self.host_ip = Some(host_ip);
  }

  pub fn with_host_ip(mut self, host_ip: String) -> V1PodStatus {
    self.host_ip = Some(host_ip);
    self
  }

  pub fn host_ip(&self) -> Option<&String> {
    self.host_ip.as_ref()
  }

  pub fn reset_host_ip(&mut self) {
    self.host_ip = None;
  }

  pub fn set_init_container_statuses(&mut self, init_container_statuses: Vec<::models::V1ContainerStatus>) {
    self.init_container_statuses = Some(init_container_statuses);
  }

  pub fn with_init_container_statuses(mut self, init_container_statuses: Vec<::models::V1ContainerStatus>) -> V1PodStatus {
    self.init_container_statuses = Some(init_container_statuses);
    self
  }

  pub fn init_container_statuses(&self) -> Option<&Vec<::models::V1ContainerStatus>> {
    self.init_container_statuses.as_ref()
  }

  pub fn reset_init_container_statuses(&mut self) {
    self.init_container_statuses = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> V1PodStatus {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_nominated_node_name(&mut self, nominated_node_name: String) {
    self.nominated_node_name = Some(nominated_node_name);
  }

  pub fn with_nominated_node_name(mut self, nominated_node_name: String) -> V1PodStatus {
    self.nominated_node_name = Some(nominated_node_name);
    self
  }

  pub fn nominated_node_name(&self) -> Option<&String> {
    self.nominated_node_name.as_ref()
  }

  pub fn reset_nominated_node_name(&mut self) {
    self.nominated_node_name = None;
  }

  pub fn set_phase(&mut self, phase: String) {
    self.phase = Some(phase);
  }

  pub fn with_phase(mut self, phase: String) -> V1PodStatus {
    self.phase = Some(phase);
    self
  }

  pub fn phase(&self) -> Option<&String> {
    self.phase.as_ref()
  }

  pub fn reset_phase(&mut self) {
    self.phase = None;
  }

  pub fn set_pod_ip(&mut self, pod_ip: String) {
    self.pod_ip = Some(pod_ip);
  }

  pub fn with_pod_ip(mut self, pod_ip: String) -> V1PodStatus {
    self.pod_ip = Some(pod_ip);
    self
  }

  pub fn pod_ip(&self) -> Option<&String> {
    self.pod_ip.as_ref()
  }

  pub fn reset_pod_ip(&mut self) {
    self.pod_ip = None;
  }

  pub fn set_qos_class(&mut self, qos_class: String) {
    self.qos_class = Some(qos_class);
  }

  pub fn with_qos_class(mut self, qos_class: String) -> V1PodStatus {
    self.qos_class = Some(qos_class);
    self
  }

  pub fn qos_class(&self) -> Option<&String> {
    self.qos_class.as_ref()
  }

  pub fn reset_qos_class(&mut self) {
    self.qos_class = None;
  }

  pub fn set_reason(&mut self, reason: String) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: String) -> V1PodStatus {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&String> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_start_time(&mut self, start_time: String) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: String) -> V1PodStatus {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&String> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

}



