/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource : ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
  /// name is the name of the resource in question.
  #[serde(rename = "name")]
  name: String,
  /// targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
  #[serde(rename = "targetAverageUtilization")]
  target_average_utilization: Option<i32>,
  #[serde(rename = "targetAverageValue")]
  target_average_value: Option<String>
}

impl IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
  /// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.
  pub fn new(name: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
    IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
      name: name,
      target_average_utilization: None,
      target_average_value: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_target_average_utilization(&mut self, target_average_utilization: i32) {
    self.target_average_utilization = Some(target_average_utilization);
  }

  pub fn with_target_average_utilization(mut self, target_average_utilization: i32) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
    self.target_average_utilization = Some(target_average_utilization);
    self
  }

  pub fn target_average_utilization(&self) -> Option<&i32> {
    self.target_average_utilization.as_ref()
  }

  pub fn reset_target_average_utilization(&mut self) {
    self.target_average_utilization = None;
  }

  pub fn set_target_average_value(&mut self, target_average_value: String) {
    self.target_average_value = Some(target_average_value);
  }

  pub fn with_target_average_value(mut self, target_average_value: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1ResourceMetricSource {
    self.target_average_value = Some(target_average_value);
    self
  }

  pub fn target_average_value(&self) -> Option<&String> {
    self.target_average_value.as_ref()
  }

  pub fn reset_target_average_value(&mut self) {
    self.target_average_value = None;
  }

}



