/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1QuobyteVolumeSource : Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1QuobyteVolumeSource {
  /// Group to map volume access to Default is no group
  #[serde(rename = "group")]
  group: Option<String>,
  /// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
  #[serde(rename = "readOnly")]
  read_only: Option<bool>,
  /// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
  #[serde(rename = "registry")]
  registry: String,
  /// User to map volume access to Defaults to serivceaccount user
  #[serde(rename = "user")]
  user: Option<String>,
  /// Volume is a string that references an already created Quobyte volume by name.
  #[serde(rename = "volume")]
  volume: String
}

impl V1QuobyteVolumeSource {
  /// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
  pub fn new(registry: String, volume: String) -> V1QuobyteVolumeSource {
    V1QuobyteVolumeSource {
      group: None,
      read_only: None,
      registry: registry,
      user: None,
      volume: volume
    }
  }

  pub fn set_group(&mut self, group: String) {
    self.group = Some(group);
  }

  pub fn with_group(mut self, group: String) -> V1QuobyteVolumeSource {
    self.group = Some(group);
    self
  }

  pub fn group(&self) -> Option<&String> {
    self.group.as_ref()
  }

  pub fn reset_group(&mut self) {
    self.group = None;
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> V1QuobyteVolumeSource {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

  pub fn set_registry(&mut self, registry: String) {
    self.registry = registry;
  }

  pub fn with_registry(mut self, registry: String) -> V1QuobyteVolumeSource {
    self.registry = registry;
    self
  }

  pub fn registry(&self) -> &String {
    &self.registry
  }


  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> V1QuobyteVolumeSource {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_volume(&mut self, volume: String) {
    self.volume = volume;
  }

  pub fn with_volume(mut self, volume: String) -> V1QuobyteVolumeSource {
    self.volume = volume;
    self
  }

  pub fn volume(&self) -> &String {
    &self.volume
  }


}



