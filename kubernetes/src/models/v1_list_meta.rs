/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1ListMeta : ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ListMeta {
  /// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
  #[serde(rename = "continue")]
  _continue: Option<String>,
  /// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. ::serde_json::Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
  #[serde(rename = "resourceVersion")]
  resource_version: Option<String>,
  /// selfLink is a URL representing this object. Populated by the system. Read-only.
  #[serde(rename = "selfLink")]
  self_link: Option<String>
}

impl V1ListMeta {
  /// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
  pub fn new() -> V1ListMeta {
    V1ListMeta {
      _continue: None,
      resource_version: None,
      self_link: None
    }
  }

  pub fn set__continue(&mut self, _continue: String) {
    self._continue = Some(_continue);
  }

  pub fn with__continue(mut self, _continue: String) -> V1ListMeta {
    self._continue = Some(_continue);
    self
  }

  pub fn _continue(&self) -> Option<&String> {
    self._continue.as_ref()
  }

  pub fn reset__continue(&mut self) {
    self._continue = None;
  }

  pub fn set_resource_version(&mut self, resource_version: String) {
    self.resource_version = Some(resource_version);
  }

  pub fn with_resource_version(mut self, resource_version: String) -> V1ListMeta {
    self.resource_version = Some(resource_version);
    self
  }

  pub fn resource_version(&self) -> Option<&String> {
    self.resource_version.as_ref()
  }

  pub fn reset_resource_version(&mut self) {
    self.resource_version = None;
  }

  pub fn set_self_link(&mut self, self_link: String) {
    self.self_link = Some(self_link);
  }

  pub fn with_self_link(mut self, self_link: String) -> V1ListMeta {
    self.self_link = Some(self_link);
    self
  }

  pub fn self_link(&self) -> Option<&String> {
    self.self_link.as_ref()
  }

  pub fn reset_self_link(&mut self) {
    self.self_link = None;
  }

}



