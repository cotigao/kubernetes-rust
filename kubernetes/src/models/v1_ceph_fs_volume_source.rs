/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1CephFsVolumeSource : Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1CephFsVolumeSource {
  /// Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
  #[serde(rename = "monitors")]
  monitors: Vec<String>,
  /// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  #[serde(rename = "path")]
  path: Option<String>,
  /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
  #[serde(rename = "readOnly")]
  read_only: Option<bool>,
  /// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
  #[serde(rename = "secretFile")]
  secret_file: Option<String>,
  /// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
  #[serde(rename = "secretRef")]
  secret_ref: Option<::models::V1LocalObjectReference>,
  /// Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
  #[serde(rename = "user")]
  user: Option<String>
}

impl V1CephFsVolumeSource {
  /// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
  pub fn new(monitors: Vec<String>) -> V1CephFsVolumeSource {
    V1CephFsVolumeSource {
      monitors: monitors,
      path: None,
      read_only: None,
      secret_file: None,
      secret_ref: None,
      user: None
    }
  }

  pub fn set_monitors(&mut self, monitors: Vec<String>) {
    self.monitors = monitors;
  }

  pub fn with_monitors(mut self, monitors: Vec<String>) -> V1CephFsVolumeSource {
    self.monitors = monitors;
    self
  }

  pub fn monitors(&self) -> &Vec<String> {
    &self.monitors
  }


  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> V1CephFsVolumeSource {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> V1CephFsVolumeSource {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

  pub fn set_secret_file(&mut self, secret_file: String) {
    self.secret_file = Some(secret_file);
  }

  pub fn with_secret_file(mut self, secret_file: String) -> V1CephFsVolumeSource {
    self.secret_file = Some(secret_file);
    self
  }

  pub fn secret_file(&self) -> Option<&String> {
    self.secret_file.as_ref()
  }

  pub fn reset_secret_file(&mut self) {
    self.secret_file = None;
  }

  pub fn set_secret_ref(&mut self, secret_ref: ::models::V1LocalObjectReference) {
    self.secret_ref = Some(secret_ref);
  }

  pub fn with_secret_ref(mut self, secret_ref: ::models::V1LocalObjectReference) -> V1CephFsVolumeSource {
    self.secret_ref = Some(secret_ref);
    self
  }

  pub fn secret_ref(&self) -> Option<&::models::V1LocalObjectReference> {
    self.secret_ref.as_ref()
  }

  pub fn reset_secret_ref(&mut self) {
    self.secret_ref = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> V1CephFsVolumeSource {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



