/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm : The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
  /// Required. A pod affinity term, associated with the corresponding weight.
  #[serde(rename = "podAffinityTerm")]
  pod_affinity_term: ::models::IoK8sKubernetesPkgApiV1PodAffinityTerm,
  /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
  #[serde(rename = "weight")]
  weight: i32
}

impl IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
  /// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
  pub fn new(pod_affinity_term: ::models::IoK8sKubernetesPkgApiV1PodAffinityTerm, weight: i32) -> IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
    IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
      pod_affinity_term: pod_affinity_term,
      weight: weight
    }
  }

  pub fn set_pod_affinity_term(&mut self, pod_affinity_term: ::models::IoK8sKubernetesPkgApiV1PodAffinityTerm) {
    self.pod_affinity_term = pod_affinity_term;
  }

  pub fn with_pod_affinity_term(mut self, pod_affinity_term: ::models::IoK8sKubernetesPkgApiV1PodAffinityTerm) -> IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
    self.pod_affinity_term = pod_affinity_term;
    self
  }

  pub fn pod_affinity_term(&self) -> &::models::IoK8sKubernetesPkgApiV1PodAffinityTerm {
    &self.pod_affinity_term
  }


  pub fn set_weight(&mut self, weight: i32) {
    self.weight = weight;
  }

  pub fn with_weight(mut self, weight: i32) -> IoK8sKubernetesPkgApiV1WeightedPodAffinityTerm {
    self.weight = weight;
    self
  }

  pub fn weight(&self) -> &i32 {
    &self.weight
  }


}



