/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1Event : Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1Event {
  /// What action was taken/failed regarding to the regarding object.
  #[serde(rename = "action")]
  action: Option<String>,
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// Deprecated field assuring backward compatibility with core.v1 Event type
  #[serde(rename = "deprecatedCount")]
  deprecated_count: Option<i32>,
  /// Deprecated field assuring backward compatibility with core.v1 Event type
  #[serde(rename = "deprecatedFirstTimestamp")]
  deprecated_first_timestamp: Option<String>,
  /// Deprecated field assuring backward compatibility with core.v1 Event type
  #[serde(rename = "deprecatedLastTimestamp")]
  deprecated_last_timestamp: Option<String>,
  /// Deprecated field assuring backward compatibility with core.v1 Event type
  #[serde(rename = "deprecatedSource")]
  deprecated_source: Option<::models::V1EventSource>,
  /// Required. Time when this Event was first observed.
  #[serde(rename = "eventTime")]
  event_time: String,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  #[serde(rename = "metadata")]
  metadata: Option<::models::V1ObjectMeta>,
  /// Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
  #[serde(rename = "note")]
  note: Option<String>,
  /// Why the action was taken.
  #[serde(rename = "reason")]
  reason: Option<String>,
  /// The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
  #[serde(rename = "regarding")]
  regarding: Option<::models::V1ObjectReference>,
  /// Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
  #[serde(rename = "related")]
  related: Option<::models::V1ObjectReference>,
  /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
  #[serde(rename = "reportingController")]
  reporting_controller: Option<String>,
  /// ID of the controller instance, e.g. `kubelet-xyzf`.
  #[serde(rename = "reportingInstance")]
  reporting_instance: Option<String>,
  /// Data about the Event series this event represents or nil if it's a singleton Event.
  #[serde(rename = "series")]
  series: Option<::models::V1beta1EventSeries>,
  /// Type of this event (Normal, Warning), new types could be added in the future.
  #[serde(rename = "type")]
  _type: Option<String>
}

impl V1beta1Event {
  /// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.
  pub fn new(event_time: String) -> V1beta1Event {
    V1beta1Event {
      action: None,
      api_version: None,
      deprecated_count: None,
      deprecated_first_timestamp: None,
      deprecated_last_timestamp: None,
      deprecated_source: None,
      event_time: event_time,
      kind: None,
      metadata: None,
      note: None,
      reason: None,
      regarding: None,
      related: None,
      reporting_controller: None,
      reporting_instance: None,
      series: None,
      _type: None
    }
  }

  pub fn set_action(&mut self, action: String) {
    self.action = Some(action);
  }

  pub fn with_action(mut self, action: String) -> V1beta1Event {
    self.action = Some(action);
    self
  }

  pub fn action(&self) -> Option<&String> {
    self.action.as_ref()
  }

  pub fn reset_action(&mut self) {
    self.action = None;
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> V1beta1Event {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_deprecated_count(&mut self, deprecated_count: i32) {
    self.deprecated_count = Some(deprecated_count);
  }

  pub fn with_deprecated_count(mut self, deprecated_count: i32) -> V1beta1Event {
    self.deprecated_count = Some(deprecated_count);
    self
  }

  pub fn deprecated_count(&self) -> Option<&i32> {
    self.deprecated_count.as_ref()
  }

  pub fn reset_deprecated_count(&mut self) {
    self.deprecated_count = None;
  }

  pub fn set_deprecated_first_timestamp(&mut self, deprecated_first_timestamp: String) {
    self.deprecated_first_timestamp = Some(deprecated_first_timestamp);
  }

  pub fn with_deprecated_first_timestamp(mut self, deprecated_first_timestamp: String) -> V1beta1Event {
    self.deprecated_first_timestamp = Some(deprecated_first_timestamp);
    self
  }

  pub fn deprecated_first_timestamp(&self) -> Option<&String> {
    self.deprecated_first_timestamp.as_ref()
  }

  pub fn reset_deprecated_first_timestamp(&mut self) {
    self.deprecated_first_timestamp = None;
  }

  pub fn set_deprecated_last_timestamp(&mut self, deprecated_last_timestamp: String) {
    self.deprecated_last_timestamp = Some(deprecated_last_timestamp);
  }

  pub fn with_deprecated_last_timestamp(mut self, deprecated_last_timestamp: String) -> V1beta1Event {
    self.deprecated_last_timestamp = Some(deprecated_last_timestamp);
    self
  }

  pub fn deprecated_last_timestamp(&self) -> Option<&String> {
    self.deprecated_last_timestamp.as_ref()
  }

  pub fn reset_deprecated_last_timestamp(&mut self) {
    self.deprecated_last_timestamp = None;
  }

  pub fn set_deprecated_source(&mut self, deprecated_source: ::models::V1EventSource) {
    self.deprecated_source = Some(deprecated_source);
  }

  pub fn with_deprecated_source(mut self, deprecated_source: ::models::V1EventSource) -> V1beta1Event {
    self.deprecated_source = Some(deprecated_source);
    self
  }

  pub fn deprecated_source(&self) -> Option<&::models::V1EventSource> {
    self.deprecated_source.as_ref()
  }

  pub fn reset_deprecated_source(&mut self) {
    self.deprecated_source = None;
  }

  pub fn set_event_time(&mut self, event_time: String) {
    self.event_time = event_time;
  }

  pub fn with_event_time(mut self, event_time: String) -> V1beta1Event {
    self.event_time = event_time;
    self
  }

  pub fn event_time(&self) -> &String {
    &self.event_time
  }


  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> V1beta1Event {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_metadata(&mut self, metadata: ::models::V1ObjectMeta) {
    self.metadata = Some(metadata);
  }

  pub fn with_metadata(mut self, metadata: ::models::V1ObjectMeta) -> V1beta1Event {
    self.metadata = Some(metadata);
    self
  }

  pub fn metadata(&self) -> Option<&::models::V1ObjectMeta> {
    self.metadata.as_ref()
  }

  pub fn reset_metadata(&mut self) {
    self.metadata = None;
  }

  pub fn set_note(&mut self, note: String) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: String) -> V1beta1Event {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&String> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_reason(&mut self, reason: String) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: String) -> V1beta1Event {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&String> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_regarding(&mut self, regarding: ::models::V1ObjectReference) {
    self.regarding = Some(regarding);
  }

  pub fn with_regarding(mut self, regarding: ::models::V1ObjectReference) -> V1beta1Event {
    self.regarding = Some(regarding);
    self
  }

  pub fn regarding(&self) -> Option<&::models::V1ObjectReference> {
    self.regarding.as_ref()
  }

  pub fn reset_regarding(&mut self) {
    self.regarding = None;
  }

  pub fn set_related(&mut self, related: ::models::V1ObjectReference) {
    self.related = Some(related);
  }

  pub fn with_related(mut self, related: ::models::V1ObjectReference) -> V1beta1Event {
    self.related = Some(related);
    self
  }

  pub fn related(&self) -> Option<&::models::V1ObjectReference> {
    self.related.as_ref()
  }

  pub fn reset_related(&mut self) {
    self.related = None;
  }

  pub fn set_reporting_controller(&mut self, reporting_controller: String) {
    self.reporting_controller = Some(reporting_controller);
  }

  pub fn with_reporting_controller(mut self, reporting_controller: String) -> V1beta1Event {
    self.reporting_controller = Some(reporting_controller);
    self
  }

  pub fn reporting_controller(&self) -> Option<&String> {
    self.reporting_controller.as_ref()
  }

  pub fn reset_reporting_controller(&mut self) {
    self.reporting_controller = None;
  }

  pub fn set_reporting_instance(&mut self, reporting_instance: String) {
    self.reporting_instance = Some(reporting_instance);
  }

  pub fn with_reporting_instance(mut self, reporting_instance: String) -> V1beta1Event {
    self.reporting_instance = Some(reporting_instance);
    self
  }

  pub fn reporting_instance(&self) -> Option<&String> {
    self.reporting_instance.as_ref()
  }

  pub fn reset_reporting_instance(&mut self) {
    self.reporting_instance = None;
  }

  pub fn set_series(&mut self, series: ::models::V1beta1EventSeries) {
    self.series = Some(series);
  }

  pub fn with_series(mut self, series: ::models::V1beta1EventSeries) -> V1beta1Event {
    self.series = Some(series);
    self
  }

  pub fn series(&self) -> Option<&::models::V1beta1EventSeries> {
    self.series.as_ref()
  }

  pub fn reset_series(&mut self) {
    self.series = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> V1beta1Event {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



