/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1Affinity : Affinity is a group of affinity scheduling rules.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1Affinity {
  #[serde(rename = "nodeAffinity")]
  node_affinity: Option<::models::IoK8sKubernetesPkgApiV1NodeAffinity>,
  #[serde(rename = "podAffinity")]
  pod_affinity: Option<::models::IoK8sKubernetesPkgApiV1PodAffinity>,
  #[serde(rename = "podAntiAffinity")]
  pod_anti_affinity: Option<::models::IoK8sKubernetesPkgApiV1PodAntiAffinity>
}

impl IoK8sKubernetesPkgApiV1Affinity {
  /// Affinity is a group of affinity scheduling rules.
  pub fn new() -> IoK8sKubernetesPkgApiV1Affinity {
    IoK8sKubernetesPkgApiV1Affinity {
      node_affinity: None,
      pod_affinity: None,
      pod_anti_affinity: None
    }
  }

  pub fn set_node_affinity(&mut self, node_affinity: ::models::IoK8sKubernetesPkgApiV1NodeAffinity) {
    self.node_affinity = Some(node_affinity);
  }

  pub fn with_node_affinity(mut self, node_affinity: ::models::IoK8sKubernetesPkgApiV1NodeAffinity) -> IoK8sKubernetesPkgApiV1Affinity {
    self.node_affinity = Some(node_affinity);
    self
  }

  pub fn node_affinity(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1NodeAffinity> {
    self.node_affinity.as_ref()
  }

  pub fn reset_node_affinity(&mut self) {
    self.node_affinity = None;
  }

  pub fn set_pod_affinity(&mut self, pod_affinity: ::models::IoK8sKubernetesPkgApiV1PodAffinity) {
    self.pod_affinity = Some(pod_affinity);
  }

  pub fn with_pod_affinity(mut self, pod_affinity: ::models::IoK8sKubernetesPkgApiV1PodAffinity) -> IoK8sKubernetesPkgApiV1Affinity {
    self.pod_affinity = Some(pod_affinity);
    self
  }

  pub fn pod_affinity(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1PodAffinity> {
    self.pod_affinity.as_ref()
  }

  pub fn reset_pod_affinity(&mut self) {
    self.pod_affinity = None;
  }

  pub fn set_pod_anti_affinity(&mut self, pod_anti_affinity: ::models::IoK8sKubernetesPkgApiV1PodAntiAffinity) {
    self.pod_anti_affinity = Some(pod_anti_affinity);
  }

  pub fn with_pod_anti_affinity(mut self, pod_anti_affinity: ::models::IoK8sKubernetesPkgApiV1PodAntiAffinity) -> IoK8sKubernetesPkgApiV1Affinity {
    self.pod_anti_affinity = Some(pod_anti_affinity);
    self
  }

  pub fn pod_anti_affinity(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1PodAntiAffinity> {
    self.pod_anti_affinity.as_ref()
  }

  pub fn reset_pod_anti_affinity(&mut self) {
    self.pod_anti_affinity = None;
  }

}



