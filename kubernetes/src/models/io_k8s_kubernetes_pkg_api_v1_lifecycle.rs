/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1Lifecycle : Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1Lifecycle {
  #[serde(rename = "postStart")]
  post_start: Option<::models::IoK8sKubernetesPkgApiV1Handler>,
  #[serde(rename = "preStop")]
  pre_stop: Option<::models::IoK8sKubernetesPkgApiV1Handler>
}

impl IoK8sKubernetesPkgApiV1Lifecycle {
  /// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
  pub fn new() -> IoK8sKubernetesPkgApiV1Lifecycle {
    IoK8sKubernetesPkgApiV1Lifecycle {
      post_start: None,
      pre_stop: None
    }
  }

  pub fn set_post_start(&mut self, post_start: ::models::IoK8sKubernetesPkgApiV1Handler) {
    self.post_start = Some(post_start);
  }

  pub fn with_post_start(mut self, post_start: ::models::IoK8sKubernetesPkgApiV1Handler) -> IoK8sKubernetesPkgApiV1Lifecycle {
    self.post_start = Some(post_start);
    self
  }

  pub fn post_start(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1Handler> {
    self.post_start.as_ref()
  }

  pub fn reset_post_start(&mut self) {
    self.post_start = None;
  }

  pub fn set_pre_stop(&mut self, pre_stop: ::models::IoK8sKubernetesPkgApiV1Handler) {
    self.pre_stop = Some(pre_stop);
  }

  pub fn with_pre_stop(mut self, pre_stop: ::models::IoK8sKubernetesPkgApiV1Handler) -> IoK8sKubernetesPkgApiV1Lifecycle {
    self.pre_stop = Some(pre_stop);
    self
  }

  pub fn pre_stop(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1Handler> {
    self.pre_stop.as_ref()
  }

  pub fn reset_pre_stop(&mut self) {
    self.pre_stop = None;
  }

}



