/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec : This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
  /// Extra information about the requesting user. See user.Info interface for details.
  #[serde(rename = "extra")]
  extra: Option<::std::collections::HashMap<String, Vec<String>>>,
  /// Group information about the requesting user. See user.Info interface for details.
  #[serde(rename = "groups")]
  groups: Option<Vec<String>>,
  /// Base64-encoded PKCS#10 CSR data
  #[serde(rename = "request")]
  request: String,
  /// UID information about the requesting user. See user.Info interface for details.
  #[serde(rename = "uid")]
  uid: Option<String>,
  /// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
  #[serde(rename = "usages")]
  usages: Option<Vec<String>>,
  /// Information about the requesting user. See user.Info interface for details.
  #[serde(rename = "username")]
  username: Option<String>
}

impl IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
  /// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
  pub fn new(request: String) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
      extra: None,
      groups: None,
      request: request,
      uid: None,
      usages: None,
      username: None
    }
  }

  pub fn set_extra(&mut self, extra: ::std::collections::HashMap<String, Vec<String>>) {
    self.extra = Some(extra);
  }

  pub fn with_extra(mut self, extra: ::std::collections::HashMap<String, Vec<String>>) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.extra = Some(extra);
    self
  }

  pub fn extra(&self) -> Option<&::std::collections::HashMap<String, Vec<String>>> {
    self.extra.as_ref()
  }

  pub fn reset_extra(&mut self) {
    self.extra = None;
  }

  pub fn set_groups(&mut self, groups: Vec<String>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<String>) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<String>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_request(&mut self, request: String) {
    self.request = request;
  }

  pub fn with_request(mut self, request: String) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.request = request;
    self
  }

  pub fn request(&self) -> &String {
    &self.request
  }


  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

  pub fn set_usages(&mut self, usages: Vec<String>) {
    self.usages = Some(usages);
  }

  pub fn with_usages(mut self, usages: Vec<String>) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.usages = Some(usages);
    self
  }

  pub fn usages(&self) -> Option<&Vec<String>> {
    self.usages.as_ref()
  }

  pub fn reset_usages(&mut self) {
    self.usages = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> IoK8sKubernetesPkgApisCertificatesV1beta1CertificateSigningRequestSpec {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



