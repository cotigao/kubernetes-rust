/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApiV1ResourceQuotaSpec : ResourceQuotaSpec defines the desired hard limits to enforce for Quota.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
  /// Hard is the set of desired hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md
  #[serde(rename = "hard")]
  hard: Option<::std::collections::HashMap<String, ::models::IoK8sApimachineryPkgApiResourceQuantity>>,
  /// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>
}

impl IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
  /// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
  pub fn new() -> IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
    IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
      hard: None,
      scopes: None
    }
  }

  pub fn set_hard(&mut self, hard: ::std::collections::HashMap<String, ::models::IoK8sApimachineryPkgApiResourceQuantity>) {
    self.hard = Some(hard);
  }

  pub fn with_hard(mut self, hard: ::std::collections::HashMap<String, ::models::IoK8sApimachineryPkgApiResourceQuantity>) -> IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
    self.hard = Some(hard);
    self
  }

  pub fn hard(&self) -> Option<&::std::collections::HashMap<String, ::models::IoK8sApimachineryPkgApiResourceQuantity>> {
    self.hard.as_ref()
  }

  pub fn reset_hard(&mut self) {
    self.hard = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> IoK8sKubernetesPkgApiV1ResourceQuotaSpec {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

}



