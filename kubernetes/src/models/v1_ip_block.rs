/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1IpBlock : IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1IpBlock {
  /// CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\"
  #[serde(rename = "cidr")]
  cidr: String,
  /// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" Except values will be rejected if they are outside the CIDR range
  #[serde(rename = "except")]
  except: Option<Vec<String>>
}

impl V1IpBlock {
  /// IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
  pub fn new(cidr: String) -> V1IpBlock {
    V1IpBlock {
      cidr: cidr,
      except: None
    }
  }

  pub fn set_cidr(&mut self, cidr: String) {
    self.cidr = cidr;
  }

  pub fn with_cidr(mut self, cidr: String) -> V1IpBlock {
    self.cidr = cidr;
    self
  }

  pub fn cidr(&self) -> &String {
    &self.cidr
  }


  pub fn set_except(&mut self, except: Vec<String>) {
    self.except = Some(except);
  }

  pub fn with_except(mut self, except: Vec<String>) -> V1IpBlock {
    self.except = Some(except);
    self
  }

  pub fn except(&self) -> Option<&Vec<String>> {
    self.except.as_ref()
  }

  pub fn reset_except(&mut self) {
    self.except = None;
  }

}



