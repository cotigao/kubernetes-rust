/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1EnvVarSource : EnvVarSource represents a source for the value of an EnvVar.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1EnvVarSource {
  #[serde(rename = "configMapKeyRef")]
  config_map_key_ref: Option<::models::IoK8sKubernetesPkgApiV1ConfigMapKeySelector>,
  #[serde(rename = "fieldRef")]
  field_ref: Option<::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector>,
  #[serde(rename = "resourceFieldRef")]
  resource_field_ref: Option<::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector>,
  #[serde(rename = "secretKeyRef")]
  secret_key_ref: Option<::models::IoK8sKubernetesPkgApiV1SecretKeySelector>
}

impl IoK8sKubernetesPkgApiV1EnvVarSource {
  /// EnvVarSource represents a source for the value of an EnvVar.
  pub fn new() -> IoK8sKubernetesPkgApiV1EnvVarSource {
    IoK8sKubernetesPkgApiV1EnvVarSource {
      config_map_key_ref: None,
      field_ref: None,
      resource_field_ref: None,
      secret_key_ref: None
    }
  }

  pub fn set_config_map_key_ref(&mut self, config_map_key_ref: ::models::IoK8sKubernetesPkgApiV1ConfigMapKeySelector) {
    self.config_map_key_ref = Some(config_map_key_ref);
  }

  pub fn with_config_map_key_ref(mut self, config_map_key_ref: ::models::IoK8sKubernetesPkgApiV1ConfigMapKeySelector) -> IoK8sKubernetesPkgApiV1EnvVarSource {
    self.config_map_key_ref = Some(config_map_key_ref);
    self
  }

  pub fn config_map_key_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ConfigMapKeySelector> {
    self.config_map_key_ref.as_ref()
  }

  pub fn reset_config_map_key_ref(&mut self) {
    self.config_map_key_ref = None;
  }

  pub fn set_field_ref(&mut self, field_ref: ::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector) {
    self.field_ref = Some(field_ref);
  }

  pub fn with_field_ref(mut self, field_ref: ::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector) -> IoK8sKubernetesPkgApiV1EnvVarSource {
    self.field_ref = Some(field_ref);
    self
  }

  pub fn field_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ObjectFieldSelector> {
    self.field_ref.as_ref()
  }

  pub fn reset_field_ref(&mut self) {
    self.field_ref = None;
  }

  pub fn set_resource_field_ref(&mut self, resource_field_ref: ::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector) {
    self.resource_field_ref = Some(resource_field_ref);
  }

  pub fn with_resource_field_ref(mut self, resource_field_ref: ::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector) -> IoK8sKubernetesPkgApiV1EnvVarSource {
    self.resource_field_ref = Some(resource_field_ref);
    self
  }

  pub fn resource_field_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ResourceFieldSelector> {
    self.resource_field_ref.as_ref()
  }

  pub fn reset_resource_field_ref(&mut self) {
    self.resource_field_ref = None;
  }

  pub fn set_secret_key_ref(&mut self, secret_key_ref: ::models::IoK8sKubernetesPkgApiV1SecretKeySelector) {
    self.secret_key_ref = Some(secret_key_ref);
  }

  pub fn with_secret_key_ref(mut self, secret_key_ref: ::models::IoK8sKubernetesPkgApiV1SecretKeySelector) -> IoK8sKubernetesPkgApiV1EnvVarSource {
    self.secret_key_ref = Some(secret_key_ref);
    self
  }

  pub fn secret_key_ref(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1SecretKeySelector> {
    self.secret_key_ref.as_ref()
  }

  pub fn reset_secret_key_ref(&mut self) {
    self.secret_key_ref = None;
  }

}



