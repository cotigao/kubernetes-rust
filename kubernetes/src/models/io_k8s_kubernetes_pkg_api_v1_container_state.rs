/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApiV1ContainerState : ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1ContainerState {
  /// Details about a running container
  #[serde(rename = "running")]
  running: Option<::models::IoK8sKubernetesPkgApiV1ContainerStateRunning>,
  /// Details about a terminated container
  #[serde(rename = "terminated")]
  terminated: Option<::models::IoK8sKubernetesPkgApiV1ContainerStateTerminated>,
  /// Details about a waiting container
  #[serde(rename = "waiting")]
  waiting: Option<::models::IoK8sKubernetesPkgApiV1ContainerStateWaiting>
}

impl IoK8sKubernetesPkgApiV1ContainerState {
  /// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
  pub fn new() -> IoK8sKubernetesPkgApiV1ContainerState {
    IoK8sKubernetesPkgApiV1ContainerState {
      running: None,
      terminated: None,
      waiting: None
    }
  }

  pub fn set_running(&mut self, running: ::models::IoK8sKubernetesPkgApiV1ContainerStateRunning) {
    self.running = Some(running);
  }

  pub fn with_running(mut self, running: ::models::IoK8sKubernetesPkgApiV1ContainerStateRunning) -> IoK8sKubernetesPkgApiV1ContainerState {
    self.running = Some(running);
    self
  }

  pub fn running(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ContainerStateRunning> {
    self.running.as_ref()
  }

  pub fn reset_running(&mut self) {
    self.running = None;
  }

  pub fn set_terminated(&mut self, terminated: ::models::IoK8sKubernetesPkgApiV1ContainerStateTerminated) {
    self.terminated = Some(terminated);
  }

  pub fn with_terminated(mut self, terminated: ::models::IoK8sKubernetesPkgApiV1ContainerStateTerminated) -> IoK8sKubernetesPkgApiV1ContainerState {
    self.terminated = Some(terminated);
    self
  }

  pub fn terminated(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ContainerStateTerminated> {
    self.terminated.as_ref()
  }

  pub fn reset_terminated(&mut self) {
    self.terminated = None;
  }

  pub fn set_waiting(&mut self, waiting: ::models::IoK8sKubernetesPkgApiV1ContainerStateWaiting) {
    self.waiting = Some(waiting);
  }

  pub fn with_waiting(mut self, waiting: ::models::IoK8sKubernetesPkgApiV1ContainerStateWaiting) -> IoK8sKubernetesPkgApiV1ContainerState {
    self.waiting = Some(waiting);
    self
  }

  pub fn waiting(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ContainerStateWaiting> {
    self.waiting.as_ref()
  }

  pub fn reset_waiting(&mut self) {
    self.waiting = None;
  }

}



