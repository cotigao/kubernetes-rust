/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1beta1PodDisruptionBudgetSpec : PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1beta1PodDisruptionBudgetSpec {
  /// An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".
  #[serde(rename = "maxUnavailable")]
  max_unavailable: Option<::serde_json::Value>,
  /// An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".
  #[serde(rename = "minAvailable")]
  min_available: Option<::serde_json::Value>,
  /// Label query over pods whose evictions are managed by the disruption budget.
  #[serde(rename = "selector")]
  selector: Option<::models::V1LabelSelector>
}

impl V1beta1PodDisruptionBudgetSpec {
  /// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
  pub fn new() -> V1beta1PodDisruptionBudgetSpec {
    V1beta1PodDisruptionBudgetSpec {
      max_unavailable: None,
      min_available: None,
      selector: None
    }
  }

  pub fn set_max_unavailable(&mut self, max_unavailable: ::serde_json::Value) {
    self.max_unavailable = Some(max_unavailable);
  }

  pub fn with_max_unavailable(mut self, max_unavailable: ::serde_json::Value) -> V1beta1PodDisruptionBudgetSpec {
    self.max_unavailable = Some(max_unavailable);
    self
  }

  pub fn max_unavailable(&self) -> Option<&Value> {
    self.max_unavailable.as_ref()
  }

  pub fn reset_max_unavailable(&mut self) {
    self.max_unavailable = None;
  }

  pub fn set_min_available(&mut self, min_available: ::serde_json::Value) {
    self.min_available = Some(min_available);
  }

  pub fn with_min_available(mut self, min_available: ::serde_json::Value) -> V1beta1PodDisruptionBudgetSpec {
    self.min_available = Some(min_available);
    self
  }

  pub fn min_available(&self) -> Option<&Value> {
    self.min_available.as_ref()
  }

  pub fn reset_min_available(&mut self) {
    self.min_available = None;
  }

  pub fn set_selector(&mut self, selector: ::models::V1LabelSelector) {
    self.selector = Some(selector);
  }

  pub fn with_selector(mut self, selector: ::models::V1LabelSelector) -> V1beta1PodDisruptionBudgetSpec {
    self.selector = Some(selector);
    self
  }

  pub fn selector(&self) -> Option<&::models::V1LabelSelector> {
    self.selector.as_ref()
  }

  pub fn reset_selector(&mut self) {
    self.selector = None;
  }

}



