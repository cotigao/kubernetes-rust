/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort : NetworkPolicyPort describes a port to allow traffic on

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
  /// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
  #[serde(rename = "port")]
  port: Option<::models::IoK8sApimachineryPkgUtilIntstrIntOrString>,
  /// The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
  #[serde(rename = "protocol")]
  protocol: Option<String>
}

impl IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
  /// NetworkPolicyPort describes a port to allow traffic on
  pub fn new() -> IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
    IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
      port: None,
      protocol: None
    }
  }

  pub fn set_port(&mut self, port: ::models::IoK8sApimachineryPkgUtilIntstrIntOrString) {
    self.port = Some(port);
  }

  pub fn with_port(mut self, port: ::models::IoK8sApimachineryPkgUtilIntstrIntOrString) -> IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
    self.port = Some(port);
    self
  }

  pub fn port(&self) -> Option<&::models::IoK8sApimachineryPkgUtilIntstrIntOrString> {
    self.port.as_ref()
  }

  pub fn reset_port(&mut self) {
    self.port = None;
  }

  pub fn set_protocol(&mut self, protocol: String) {
    self.protocol = Some(protocol);
  }

  pub fn with_protocol(mut self, protocol: String) -> IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyPort {
    self.protocol = Some(protocol);
    self
  }

  pub fn protocol(&self) -> Option<&String> {
    self.protocol.as_ref()
  }

  pub fn reset_protocol(&mut self) {
    self.protocol = None;
  }

}



