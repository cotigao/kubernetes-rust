/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sApimachineryPkgApisMetaV1ApiGroup : APIGroup contains the name, the supported versions, and the preferred version of a group.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApimachineryPkgApisMetaV1ApiGroup {
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  /// name is the name of the group.
  #[serde(rename = "name")]
  name: String,
  /// preferredVersion is the version preferred by the API server, which probably is the storage version.
  #[serde(rename = "preferredVersion")]
  preferred_version: Option<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>,
  /// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
  #[serde(rename = "serverAddressByClientCIDRs")]
  server_address_by_client_cid_rs: Vec<::models::IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr>,
  /// versions are the versions supported in this group.
  #[serde(rename = "versions")]
  versions: Vec<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>
}

impl IoK8sApimachineryPkgApisMetaV1ApiGroup {
  /// APIGroup contains the name, the supported versions, and the preferred version of a group.
  pub fn new(name: String, server_address_by_client_cid_rs: Vec<::models::IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr>, versions: Vec<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    IoK8sApimachineryPkgApisMetaV1ApiGroup {
      api_version: None,
      kind: None,
      name: name,
      preferred_version: None,
      server_address_by_client_cid_rs: server_address_by_client_cid_rs,
      versions: versions
    }
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_preferred_version(&mut self, preferred_version: ::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) {
    self.preferred_version = Some(preferred_version);
  }

  pub fn with_preferred_version(mut self, preferred_version: ::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.preferred_version = Some(preferred_version);
    self
  }

  pub fn preferred_version(&self) -> Option<&::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery> {
    self.preferred_version.as_ref()
  }

  pub fn reset_preferred_version(&mut self) {
    self.preferred_version = None;
  }

  pub fn set_server_address_by_client_cid_rs(&mut self, server_address_by_client_cid_rs: Vec<::models::IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr>) {
    self.server_address_by_client_cid_rs = server_address_by_client_cid_rs;
  }

  pub fn with_server_address_by_client_cid_rs(mut self, server_address_by_client_cid_rs: Vec<::models::IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr>) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.server_address_by_client_cid_rs = server_address_by_client_cid_rs;
    self
  }

  pub fn server_address_by_client_cid_rs(&self) -> &Vec<::models::IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCidr> {
    &self.server_address_by_client_cid_rs
  }


  pub fn set_versions(&mut self, versions: Vec<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>) {
    self.versions = versions;
  }

  pub fn with_versions(mut self, versions: Vec<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>) -> IoK8sApimachineryPkgApisMetaV1ApiGroup {
    self.versions = versions;
    self
  }

  pub fn versions(&self) -> &Vec<::models::IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery> {
    &self.versions
  }


}



