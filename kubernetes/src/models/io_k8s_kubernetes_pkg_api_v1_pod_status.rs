/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1PodStatus : PodStatus represents information about the status of a pod. Status may trail the actual state of a system.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1PodStatus {
  /// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
  #[serde(rename = "conditions")]
  conditions: Option<Vec<::models::IoK8sKubernetesPkgApiV1PodCondition>>,
  /// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  #[serde(rename = "containerStatuses")]
  container_statuses: Option<Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>>,
  /// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
  #[serde(rename = "hostIP")]
  host_ip: Option<String>,
  /// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
  #[serde(rename = "initContainerStatuses")]
  init_container_statuses: Option<Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>>,
  /// A human readable message indicating details about why the pod is in this condition.
  #[serde(rename = "message")]
  message: Option<String>,
  /// Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
  #[serde(rename = "phase")]
  phase: Option<String>,
  /// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
  #[serde(rename = "podIP")]
  pod_ip: Option<String>,
  /// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md
  #[serde(rename = "qosClass")]
  qos_class: Option<String>,
  /// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'
  #[serde(rename = "reason")]
  reason: Option<String>,
  #[serde(rename = "startTime")]
  start_time: Option<String>
}

impl IoK8sKubernetesPkgApiV1PodStatus {
  /// PodStatus represents information about the status of a pod. Status may trail the actual state of a system.
  pub fn new() -> IoK8sKubernetesPkgApiV1PodStatus {
    IoK8sKubernetesPkgApiV1PodStatus {
      conditions: None,
      container_statuses: None,
      host_ip: None,
      init_container_statuses: None,
      message: None,
      phase: None,
      pod_ip: None,
      qos_class: None,
      reason: None,
      start_time: None
    }
  }

  pub fn set_conditions(&mut self, conditions: Vec<::models::IoK8sKubernetesPkgApiV1PodCondition>) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: Vec<::models::IoK8sKubernetesPkgApiV1PodCondition>) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1PodCondition>> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_container_statuses(&mut self, container_statuses: Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>) {
    self.container_statuses = Some(container_statuses);
  }

  pub fn with_container_statuses(mut self, container_statuses: Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.container_statuses = Some(container_statuses);
    self
  }

  pub fn container_statuses(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>> {
    self.container_statuses.as_ref()
  }

  pub fn reset_container_statuses(&mut self) {
    self.container_statuses = None;
  }

  pub fn set_host_ip(&mut self, host_ip: String) {
    self.host_ip = Some(host_ip);
  }

  pub fn with_host_ip(mut self, host_ip: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.host_ip = Some(host_ip);
    self
  }

  pub fn host_ip(&self) -> Option<&String> {
    self.host_ip.as_ref()
  }

  pub fn reset_host_ip(&mut self) {
    self.host_ip = None;
  }

  pub fn set_init_container_statuses(&mut self, init_container_statuses: Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>) {
    self.init_container_statuses = Some(init_container_statuses);
  }

  pub fn with_init_container_statuses(mut self, init_container_statuses: Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.init_container_statuses = Some(init_container_statuses);
    self
  }

  pub fn init_container_statuses(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1ContainerStatus>> {
    self.init_container_statuses.as_ref()
  }

  pub fn reset_init_container_statuses(&mut self) {
    self.init_container_statuses = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_phase(&mut self, phase: String) {
    self.phase = Some(phase);
  }

  pub fn with_phase(mut self, phase: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.phase = Some(phase);
    self
  }

  pub fn phase(&self) -> Option<&String> {
    self.phase.as_ref()
  }

  pub fn reset_phase(&mut self) {
    self.phase = None;
  }

  pub fn set_pod_ip(&mut self, pod_ip: String) {
    self.pod_ip = Some(pod_ip);
  }

  pub fn with_pod_ip(mut self, pod_ip: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.pod_ip = Some(pod_ip);
    self
  }

  pub fn pod_ip(&self) -> Option<&String> {
    self.pod_ip.as_ref()
  }

  pub fn reset_pod_ip(&mut self) {
    self.pod_ip = None;
  }

  pub fn set_qos_class(&mut self, qos_class: String) {
    self.qos_class = Some(qos_class);
  }

  pub fn with_qos_class(mut self, qos_class: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.qos_class = Some(qos_class);
    self
  }

  pub fn qos_class(&self) -> Option<&String> {
    self.qos_class.as_ref()
  }

  pub fn reset_qos_class(&mut self) {
    self.qos_class = None;
  }

  pub fn set_reason(&mut self, reason: String) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&String> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_start_time(&mut self, start_time: String) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: String) -> IoK8sKubernetesPkgApiV1PodStatus {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&String> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

}



