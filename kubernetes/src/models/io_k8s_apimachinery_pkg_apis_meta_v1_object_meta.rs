/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sApimachineryPkgApisMetaV1ObjectMeta : ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApimachineryPkgApisMetaV1ObjectMeta {
  /// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
  #[serde(rename = "annotations")]
  annotations: Option<::std::collections::HashMap<String, String>>,
  /// The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
  #[serde(rename = "clusterName")]
  cluster_name: Option<String>,
  #[serde(rename = "creationTimestamp")]
  creation_timestamp: Option<String>,
  /// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  #[serde(rename = "deletionGracePeriodSeconds")]
  deletion_grace_period_seconds: Option<i64>,
  #[serde(rename = "deletionTimestamp")]
  deletion_timestamp: Option<String>,
  /// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  #[serde(rename = "finalizers")]
  finalizers: Option<Vec<String>>,
  /// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
  #[serde(rename = "generateName")]
  generate_name: Option<String>,
  /// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  #[serde(rename = "generation")]
  generation: Option<i64>,
  #[serde(rename = "initializers")]
  initializers: Option<::models::IoK8sApimachineryPkgApisMetaV1Initializers>,
  /// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
  #[serde(rename = "labels")]
  labels: Option<::std::collections::HashMap<String, String>>,
  /// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
  #[serde(rename = "name")]
  name: Option<String>,
  /// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
  #[serde(rename = "namespace")]
  namespace: Option<String>,
  /// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  #[serde(rename = "ownerReferences")]
  owner_references: Option<Vec<::models::IoK8sApimachineryPkgApisMetaV1OwnerReference>>,
  /// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
  #[serde(rename = "resourceVersion")]
  resource_version: Option<String>,
  /// SelfLink is a URL representing this object. Populated by the system. Read-only.
  #[serde(rename = "selfLink")]
  self_link: Option<String>,
  /// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
  #[serde(rename = "uid")]
  uid: Option<String>
}

impl IoK8sApimachineryPkgApisMetaV1ObjectMeta {
  /// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
  pub fn new() -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    IoK8sApimachineryPkgApisMetaV1ObjectMeta {
      annotations: None,
      cluster_name: None,
      creation_timestamp: None,
      deletion_grace_period_seconds: None,
      deletion_timestamp: None,
      finalizers: None,
      generate_name: None,
      generation: None,
      initializers: None,
      labels: None,
      name: None,
      namespace: None,
      owner_references: None,
      resource_version: None,
      self_link: None,
      uid: None
    }
  }

  pub fn set_annotations(&mut self, annotations: ::std::collections::HashMap<String, String>) {
    self.annotations = Some(annotations);
  }

  pub fn with_annotations(mut self, annotations: ::std::collections::HashMap<String, String>) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.annotations = Some(annotations);
    self
  }

  pub fn annotations(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.annotations.as_ref()
  }

  pub fn reset_annotations(&mut self) {
    self.annotations = None;
  }

  pub fn set_cluster_name(&mut self, cluster_name: String) {
    self.cluster_name = Some(cluster_name);
  }

  pub fn with_cluster_name(mut self, cluster_name: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.cluster_name = Some(cluster_name);
    self
  }

  pub fn cluster_name(&self) -> Option<&String> {
    self.cluster_name.as_ref()
  }

  pub fn reset_cluster_name(&mut self) {
    self.cluster_name = None;
  }

  pub fn set_creation_timestamp(&mut self, creation_timestamp: String) {
    self.creation_timestamp = Some(creation_timestamp);
  }

  pub fn with_creation_timestamp(mut self, creation_timestamp: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.creation_timestamp = Some(creation_timestamp);
    self
  }

  pub fn creation_timestamp(&self) -> Option<&String> {
    self.creation_timestamp.as_ref()
  }

  pub fn reset_creation_timestamp(&mut self) {
    self.creation_timestamp = None;
  }

  pub fn set_deletion_grace_period_seconds(&mut self, deletion_grace_period_seconds: i64) {
    self.deletion_grace_period_seconds = Some(deletion_grace_period_seconds);
  }

  pub fn with_deletion_grace_period_seconds(mut self, deletion_grace_period_seconds: i64) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.deletion_grace_period_seconds = Some(deletion_grace_period_seconds);
    self
  }

  pub fn deletion_grace_period_seconds(&self) -> Option<&i64> {
    self.deletion_grace_period_seconds.as_ref()
  }

  pub fn reset_deletion_grace_period_seconds(&mut self) {
    self.deletion_grace_period_seconds = None;
  }

  pub fn set_deletion_timestamp(&mut self, deletion_timestamp: String) {
    self.deletion_timestamp = Some(deletion_timestamp);
  }

  pub fn with_deletion_timestamp(mut self, deletion_timestamp: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.deletion_timestamp = Some(deletion_timestamp);
    self
  }

  pub fn deletion_timestamp(&self) -> Option<&String> {
    self.deletion_timestamp.as_ref()
  }

  pub fn reset_deletion_timestamp(&mut self) {
    self.deletion_timestamp = None;
  }

  pub fn set_finalizers(&mut self, finalizers: Vec<String>) {
    self.finalizers = Some(finalizers);
  }

  pub fn with_finalizers(mut self, finalizers: Vec<String>) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.finalizers = Some(finalizers);
    self
  }

  pub fn finalizers(&self) -> Option<&Vec<String>> {
    self.finalizers.as_ref()
  }

  pub fn reset_finalizers(&mut self) {
    self.finalizers = None;
  }

  pub fn set_generate_name(&mut self, generate_name: String) {
    self.generate_name = Some(generate_name);
  }

  pub fn with_generate_name(mut self, generate_name: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.generate_name = Some(generate_name);
    self
  }

  pub fn generate_name(&self) -> Option<&String> {
    self.generate_name.as_ref()
  }

  pub fn reset_generate_name(&mut self) {
    self.generate_name = None;
  }

  pub fn set_generation(&mut self, generation: i64) {
    self.generation = Some(generation);
  }

  pub fn with_generation(mut self, generation: i64) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.generation = Some(generation);
    self
  }

  pub fn generation(&self) -> Option<&i64> {
    self.generation.as_ref()
  }

  pub fn reset_generation(&mut self) {
    self.generation = None;
  }

  pub fn set_initializers(&mut self, initializers: ::models::IoK8sApimachineryPkgApisMetaV1Initializers) {
    self.initializers = Some(initializers);
  }

  pub fn with_initializers(mut self, initializers: ::models::IoK8sApimachineryPkgApisMetaV1Initializers) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.initializers = Some(initializers);
    self
  }

  pub fn initializers(&self) -> Option<&::models::IoK8sApimachineryPkgApisMetaV1Initializers> {
    self.initializers.as_ref()
  }

  pub fn reset_initializers(&mut self) {
    self.initializers = None;
  }

  pub fn set_labels(&mut self, labels: ::std::collections::HashMap<String, String>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: ::std::collections::HashMap<String, String>) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_namespace(&mut self, namespace: String) {
    self.namespace = Some(namespace);
  }

  pub fn with_namespace(mut self, namespace: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.namespace = Some(namespace);
    self
  }

  pub fn namespace(&self) -> Option<&String> {
    self.namespace.as_ref()
  }

  pub fn reset_namespace(&mut self) {
    self.namespace = None;
  }

  pub fn set_owner_references(&mut self, owner_references: Vec<::models::IoK8sApimachineryPkgApisMetaV1OwnerReference>) {
    self.owner_references = Some(owner_references);
  }

  pub fn with_owner_references(mut self, owner_references: Vec<::models::IoK8sApimachineryPkgApisMetaV1OwnerReference>) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.owner_references = Some(owner_references);
    self
  }

  pub fn owner_references(&self) -> Option<&Vec<::models::IoK8sApimachineryPkgApisMetaV1OwnerReference>> {
    self.owner_references.as_ref()
  }

  pub fn reset_owner_references(&mut self) {
    self.owner_references = None;
  }

  pub fn set_resource_version(&mut self, resource_version: String) {
    self.resource_version = Some(resource_version);
  }

  pub fn with_resource_version(mut self, resource_version: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.resource_version = Some(resource_version);
    self
  }

  pub fn resource_version(&self) -> Option<&String> {
    self.resource_version.as_ref()
  }

  pub fn reset_resource_version(&mut self) {
    self.resource_version = None;
  }

  pub fn set_self_link(&mut self, self_link: String) {
    self.self_link = Some(self_link);
  }

  pub fn with_self_link(mut self, self_link: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.self_link = Some(self_link);
    self
  }

  pub fn self_link(&self) -> Option<&String> {
    self.self_link.as_ref()
  }

  pub fn reset_self_link(&mut self) {
    self.self_link = None;
  }

  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

}



