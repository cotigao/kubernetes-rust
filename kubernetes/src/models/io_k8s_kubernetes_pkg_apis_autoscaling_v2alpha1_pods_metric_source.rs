/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource : PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
  /// metricName is the name of the metric in question
  #[serde(rename = "metricName")]
  metric_name: String,
  #[serde(rename = "targetAverageValue")]
  target_average_value: String
}

impl IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
  /// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
  pub fn new(metric_name: String, target_average_value: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
    IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
      metric_name: metric_name,
      target_average_value: target_average_value
    }
  }

  pub fn set_metric_name(&mut self, metric_name: String) {
    self.metric_name = metric_name;
  }

  pub fn with_metric_name(mut self, metric_name: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
    self.metric_name = metric_name;
    self
  }

  pub fn metric_name(&self) -> &String {
    &self.metric_name
  }


  pub fn set_target_average_value(&mut self, target_average_value: String) {
    self.target_average_value = target_average_value;
  }

  pub fn with_target_average_value(mut self, target_average_value: String) -> IoK8sKubernetesPkgApisAutoscalingV2alpha1PodsMetricSource {
    self.target_average_value = target_average_value;
    self
  }

  pub fn target_average_value(&self) -> &String {
    &self.target_average_value
  }


}



