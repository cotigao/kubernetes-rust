/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1FlexVolumeSource : FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1FlexVolumeSource {
  /// Driver is the name of the driver to use for this volume.
  #[serde(rename = "driver")]
  driver: String,
  /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
  #[serde(rename = "fsType")]
  fs_type: Option<String>,
  /// Optional: Extra command options if any.
  #[serde(rename = "options")]
  options: Option<::std::collections::HashMap<String, String>>,
  /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  #[serde(rename = "readOnly")]
  read_only: Option<bool>,
  /// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  #[serde(rename = "secretRef")]
  secret_ref: Option<::models::V1LocalObjectReference>
}

impl V1FlexVolumeSource {
  /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  pub fn new(driver: String) -> V1FlexVolumeSource {
    V1FlexVolumeSource {
      driver: driver,
      fs_type: None,
      options: None,
      read_only: None,
      secret_ref: None
    }
  }

  pub fn set_driver(&mut self, driver: String) {
    self.driver = driver;
  }

  pub fn with_driver(mut self, driver: String) -> V1FlexVolumeSource {
    self.driver = driver;
    self
  }

  pub fn driver(&self) -> &String {
    &self.driver
  }


  pub fn set_fs_type(&mut self, fs_type: String) {
    self.fs_type = Some(fs_type);
  }

  pub fn with_fs_type(mut self, fs_type: String) -> V1FlexVolumeSource {
    self.fs_type = Some(fs_type);
    self
  }

  pub fn fs_type(&self) -> Option<&String> {
    self.fs_type.as_ref()
  }

  pub fn reset_fs_type(&mut self) {
    self.fs_type = None;
  }

  pub fn set_options(&mut self, options: ::std::collections::HashMap<String, String>) {
    self.options = Some(options);
  }

  pub fn with_options(mut self, options: ::std::collections::HashMap<String, String>) -> V1FlexVolumeSource {
    self.options = Some(options);
    self
  }

  pub fn options(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.options.as_ref()
  }

  pub fn reset_options(&mut self) {
    self.options = None;
  }

  pub fn set_read_only(&mut self, read_only: bool) {
    self.read_only = Some(read_only);
  }

  pub fn with_read_only(mut self, read_only: bool) -> V1FlexVolumeSource {
    self.read_only = Some(read_only);
    self
  }

  pub fn read_only(&self) -> Option<&bool> {
    self.read_only.as_ref()
  }

  pub fn reset_read_only(&mut self) {
    self.read_only = None;
  }

  pub fn set_secret_ref(&mut self, secret_ref: ::models::V1LocalObjectReference) {
    self.secret_ref = Some(secret_ref);
  }

  pub fn with_secret_ref(mut self, secret_ref: ::models::V1LocalObjectReference) -> V1FlexVolumeSource {
    self.secret_ref = Some(secret_ref);
    self
  }

  pub fn secret_ref(&self) -> Option<&::models::V1LocalObjectReference> {
    self.secret_ref.as_ref()
  }

  pub fn reset_secret_ref(&mut self) {
    self.secret_ref = None;
  }

}



