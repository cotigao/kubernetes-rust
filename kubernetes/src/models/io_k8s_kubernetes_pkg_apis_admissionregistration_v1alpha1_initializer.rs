/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer : Initializer describes the name and the failure policy of an initializer, and what resources it applies to.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
  /// FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \"Ignore\" is set, initializer is removed from the initializers list of an object if the timeout is reached; If \"Fail\" is set, admissionregistration returns timeout error if the timeout is reached.
  #[serde(rename = "failurePolicy")]
  failure_policy: Option<String>,
  /// Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \"alwayspullimages\" is the name of the webhook, and kubernetes.io is the name of the organization. Required
  #[serde(rename = "name")]
  name: String,
  /// Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.
  #[serde(rename = "rules")]
  rules: Option<Vec<::models::IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule>>
}

impl IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
  /// Initializer describes the name and the failure policy of an initializer, and what resources it applies to.
  pub fn new(name: String) -> IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
    IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
      failure_policy: None,
      name: name,
      rules: None
    }
  }

  pub fn set_failure_policy(&mut self, failure_policy: String) {
    self.failure_policy = Some(failure_policy);
  }

  pub fn with_failure_policy(mut self, failure_policy: String) -> IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
    self.failure_policy = Some(failure_policy);
    self
  }

  pub fn failure_policy(&self) -> Option<&String> {
    self.failure_policy.as_ref()
  }

  pub fn reset_failure_policy(&mut self) {
    self.failure_policy = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_rules(&mut self, rules: Vec<::models::IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule>) {
    self.rules = Some(rules);
  }

  pub fn with_rules(mut self, rules: Vec<::models::IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule>) -> IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Initializer {
    self.rules = Some(rules);
    self
  }

  pub fn rules(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApisAdmissionregistrationV1alpha1Rule>> {
    self.rules.as_ref()
  }

  pub fn reset_rules(&mut self) {
    self.rules = None;
  }

}



