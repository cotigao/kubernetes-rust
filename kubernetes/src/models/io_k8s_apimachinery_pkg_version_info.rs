/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sApimachineryPkgVersionInfo : Info contains versioning information. how we'll want to distribute that information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sApimachineryPkgVersionInfo {
  #[serde(rename = "buildDate")]
  build_date: String,
  #[serde(rename = "compiler")]
  compiler: String,
  #[serde(rename = "gitCommit")]
  git_commit: String,
  #[serde(rename = "gitTreeState")]
  git_tree_state: String,
  #[serde(rename = "gitVersion")]
  git_version: String,
  #[serde(rename = "goVersion")]
  go_version: String,
  #[serde(rename = "major")]
  major: String,
  #[serde(rename = "minor")]
  minor: String,
  #[serde(rename = "platform")]
  platform: String
}

impl IoK8sApimachineryPkgVersionInfo {
  /// Info contains versioning information. how we'll want to distribute that information.
  pub fn new(build_date: String, compiler: String, git_commit: String, git_tree_state: String, git_version: String, go_version: String, major: String, minor: String, platform: String) -> IoK8sApimachineryPkgVersionInfo {
    IoK8sApimachineryPkgVersionInfo {
      build_date: build_date,
      compiler: compiler,
      git_commit: git_commit,
      git_tree_state: git_tree_state,
      git_version: git_version,
      go_version: go_version,
      major: major,
      minor: minor,
      platform: platform
    }
  }

  pub fn set_build_date(&mut self, build_date: String) {
    self.build_date = build_date;
  }

  pub fn with_build_date(mut self, build_date: String) -> IoK8sApimachineryPkgVersionInfo {
    self.build_date = build_date;
    self
  }

  pub fn build_date(&self) -> &String {
    &self.build_date
  }


  pub fn set_compiler(&mut self, compiler: String) {
    self.compiler = compiler;
  }

  pub fn with_compiler(mut self, compiler: String) -> IoK8sApimachineryPkgVersionInfo {
    self.compiler = compiler;
    self
  }

  pub fn compiler(&self) -> &String {
    &self.compiler
  }


  pub fn set_git_commit(&mut self, git_commit: String) {
    self.git_commit = git_commit;
  }

  pub fn with_git_commit(mut self, git_commit: String) -> IoK8sApimachineryPkgVersionInfo {
    self.git_commit = git_commit;
    self
  }

  pub fn git_commit(&self) -> &String {
    &self.git_commit
  }


  pub fn set_git_tree_state(&mut self, git_tree_state: String) {
    self.git_tree_state = git_tree_state;
  }

  pub fn with_git_tree_state(mut self, git_tree_state: String) -> IoK8sApimachineryPkgVersionInfo {
    self.git_tree_state = git_tree_state;
    self
  }

  pub fn git_tree_state(&self) -> &String {
    &self.git_tree_state
  }


  pub fn set_git_version(&mut self, git_version: String) {
    self.git_version = git_version;
  }

  pub fn with_git_version(mut self, git_version: String) -> IoK8sApimachineryPkgVersionInfo {
    self.git_version = git_version;
    self
  }

  pub fn git_version(&self) -> &String {
    &self.git_version
  }


  pub fn set_go_version(&mut self, go_version: String) {
    self.go_version = go_version;
  }

  pub fn with_go_version(mut self, go_version: String) -> IoK8sApimachineryPkgVersionInfo {
    self.go_version = go_version;
    self
  }

  pub fn go_version(&self) -> &String {
    &self.go_version
  }


  pub fn set_major(&mut self, major: String) {
    self.major = major;
  }

  pub fn with_major(mut self, major: String) -> IoK8sApimachineryPkgVersionInfo {
    self.major = major;
    self
  }

  pub fn major(&self) -> &String {
    &self.major
  }


  pub fn set_minor(&mut self, minor: String) {
    self.minor = minor;
  }

  pub fn with_minor(mut self, minor: String) -> IoK8sApimachineryPkgVersionInfo {
    self.minor = minor;
    self
  }

  pub fn minor(&self) -> &String {
    &self.minor
  }


  pub fn set_platform(&mut self, platform: String) {
    self.platform = platform;
  }

  pub fn with_platform(mut self, platform: String) -> IoK8sApimachineryPkgVersionInfo {
    self.platform = platform;
    self
  }

  pub fn platform(&self) -> &String {
    &self.platform
  }


}



