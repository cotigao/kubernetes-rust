/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1EndpointSubset : EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],     Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1EndpointSubset {
  /// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
  #[serde(rename = "addresses")]
  addresses: Option<Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>>,
  /// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
  #[serde(rename = "notReadyAddresses")]
  not_ready_addresses: Option<Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>>,
  /// Port numbers available on the related IP addresses.
  #[serde(rename = "ports")]
  ports: Option<Vec<::models::IoK8sKubernetesPkgApiV1EndpointPort>>
}

impl IoK8sKubernetesPkgApiV1EndpointSubset {
  /// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],     Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]
  pub fn new() -> IoK8sKubernetesPkgApiV1EndpointSubset {
    IoK8sKubernetesPkgApiV1EndpointSubset {
      addresses: None,
      not_ready_addresses: None,
      ports: None
    }
  }

  pub fn set_addresses(&mut self, addresses: Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>) {
    self.addresses = Some(addresses);
  }

  pub fn with_addresses(mut self, addresses: Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>) -> IoK8sKubernetesPkgApiV1EndpointSubset {
    self.addresses = Some(addresses);
    self
  }

  pub fn addresses(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>> {
    self.addresses.as_ref()
  }

  pub fn reset_addresses(&mut self) {
    self.addresses = None;
  }

  pub fn set_not_ready_addresses(&mut self, not_ready_addresses: Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>) {
    self.not_ready_addresses = Some(not_ready_addresses);
  }

  pub fn with_not_ready_addresses(mut self, not_ready_addresses: Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>) -> IoK8sKubernetesPkgApiV1EndpointSubset {
    self.not_ready_addresses = Some(not_ready_addresses);
    self
  }

  pub fn not_ready_addresses(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1EndpointAddress>> {
    self.not_ready_addresses.as_ref()
  }

  pub fn reset_not_ready_addresses(&mut self) {
    self.not_ready_addresses = None;
  }

  pub fn set_ports(&mut self, ports: Vec<::models::IoK8sKubernetesPkgApiV1EndpointPort>) {
    self.ports = Some(ports);
  }

  pub fn with_ports(mut self, ports: Vec<::models::IoK8sKubernetesPkgApiV1EndpointPort>) -> IoK8sKubernetesPkgApiV1EndpointSubset {
    self.ports = Some(ports);
    self
  }

  pub fn ports(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1EndpointPort>> {
    self.ports.as_ref()
  }

  pub fn reset_ports(&mut self) {
    self.ports = None;
  }

}



