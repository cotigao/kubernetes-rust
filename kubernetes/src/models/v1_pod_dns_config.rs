/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1PodDnsConfig : PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1PodDnsConfig {
  /// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
  #[serde(rename = "nameservers")]
  nameservers: Option<Vec<String>>,
  /// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
  #[serde(rename = "options")]
  options: Option<Vec<::models::V1PodDnsConfigOption>>,
  /// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
  #[serde(rename = "searches")]
  searches: Option<Vec<String>>
}

impl V1PodDnsConfig {
  /// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
  pub fn new() -> V1PodDnsConfig {
    V1PodDnsConfig {
      nameservers: None,
      options: None,
      searches: None
    }
  }

  pub fn set_nameservers(&mut self, nameservers: Vec<String>) {
    self.nameservers = Some(nameservers);
  }

  pub fn with_nameservers(mut self, nameservers: Vec<String>) -> V1PodDnsConfig {
    self.nameservers = Some(nameservers);
    self
  }

  pub fn nameservers(&self) -> Option<&Vec<String>> {
    self.nameservers.as_ref()
  }

  pub fn reset_nameservers(&mut self) {
    self.nameservers = None;
  }

  pub fn set_options(&mut self, options: Vec<::models::V1PodDnsConfigOption>) {
    self.options = Some(options);
  }

  pub fn with_options(mut self, options: Vec<::models::V1PodDnsConfigOption>) -> V1PodDnsConfig {
    self.options = Some(options);
    self
  }

  pub fn options(&self) -> Option<&Vec<::models::V1PodDnsConfigOption>> {
    self.options.as_ref()
  }

  pub fn reset_options(&mut self) {
    self.options = None;
  }

  pub fn set_searches(&mut self, searches: Vec<String>) {
    self.searches = Some(searches);
  }

  pub fn with_searches(mut self, searches: Vec<String>) -> V1PodDnsConfig {
    self.searches = Some(searches);
    self
  }

  pub fn searches(&self) -> Option<&Vec<String>> {
    self.searches.as_ref()
  }

  pub fn reset_searches(&mut self) {
    self.searches = None;
  }

}



