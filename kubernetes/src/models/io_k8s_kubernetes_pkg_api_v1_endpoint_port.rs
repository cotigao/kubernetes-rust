/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1EndpointPort : EndpointPort is a tuple that describes a single port.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1EndpointPort {
  /// The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The port number of the endpoint.
  #[serde(rename = "port")]
  port: i32,
  /// The IP protocol for this port. Must be UDP or TCP. Default is TCP.
  #[serde(rename = "protocol")]
  protocol: Option<String>
}

impl IoK8sKubernetesPkgApiV1EndpointPort {
  /// EndpointPort is a tuple that describes a single port.
  pub fn new(port: i32) -> IoK8sKubernetesPkgApiV1EndpointPort {
    IoK8sKubernetesPkgApiV1EndpointPort {
      name: None,
      port: port,
      protocol: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> IoK8sKubernetesPkgApiV1EndpointPort {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_port(&mut self, port: i32) {
    self.port = port;
  }

  pub fn with_port(mut self, port: i32) -> IoK8sKubernetesPkgApiV1EndpointPort {
    self.port = port;
    self
  }

  pub fn port(&self) -> &i32 {
    &self.port
  }


  pub fn set_protocol(&mut self, protocol: String) {
    self.protocol = Some(protocol);
  }

  pub fn with_protocol(mut self, protocol: String) -> IoK8sKubernetesPkgApiV1EndpointPort {
    self.protocol = Some(protocol);
    self
  }

  pub fn protocol(&self) -> Option<&String> {
    self.protocol.as_ref()
  }

  pub fn reset_protocol(&mut self) {
    self.protocol = None;
  }

}



