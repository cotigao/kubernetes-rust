/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1DeleteOptions : DeleteOptions may be provided when deleting an API object.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1DeleteOptions {
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// The duration in seconds before the object should be deleted. ::serde_json::Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  #[serde(rename = "gracePeriodSeconds")]
  grace_period_seconds: Option<i64>,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
  #[serde(rename = "orphanDependents")]
  orphan_dependents: Option<bool>,
  /// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  #[serde(rename = "preconditions")]
  preconditions: Option<::models::V1Preconditions>,
  /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  #[serde(rename = "propagationPolicy")]
  propagation_policy: Option<String>
}

impl V1DeleteOptions {
  /// DeleteOptions may be provided when deleting an API object.
  pub fn new() -> V1DeleteOptions {
    V1DeleteOptions {
      api_version: None,
      grace_period_seconds: None,
      kind: None,
      orphan_dependents: None,
      preconditions: None,
      propagation_policy: None
    }
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> V1DeleteOptions {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_grace_period_seconds(&mut self, grace_period_seconds: i64) {
    self.grace_period_seconds = Some(grace_period_seconds);
  }

  pub fn with_grace_period_seconds(mut self, grace_period_seconds: i64) -> V1DeleteOptions {
    self.grace_period_seconds = Some(grace_period_seconds);
    self
  }

  pub fn grace_period_seconds(&self) -> Option<&i64> {
    self.grace_period_seconds.as_ref()
  }

  pub fn reset_grace_period_seconds(&mut self) {
    self.grace_period_seconds = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> V1DeleteOptions {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_orphan_dependents(&mut self, orphan_dependents: bool) {
    self.orphan_dependents = Some(orphan_dependents);
  }

  pub fn with_orphan_dependents(mut self, orphan_dependents: bool) -> V1DeleteOptions {
    self.orphan_dependents = Some(orphan_dependents);
    self
  }

  pub fn orphan_dependents(&self) -> Option<&bool> {
    self.orphan_dependents.as_ref()
  }

  pub fn reset_orphan_dependents(&mut self) {
    self.orphan_dependents = None;
  }

  pub fn set_preconditions(&mut self, preconditions: ::models::V1Preconditions) {
    self.preconditions = Some(preconditions);
  }

  pub fn with_preconditions(mut self, preconditions: ::models::V1Preconditions) -> V1DeleteOptions {
    self.preconditions = Some(preconditions);
    self
  }

  pub fn preconditions(&self) -> Option<&::models::V1Preconditions> {
    self.preconditions.as_ref()
  }

  pub fn reset_preconditions(&mut self) {
    self.preconditions = None;
  }

  pub fn set_propagation_policy(&mut self, propagation_policy: String) {
    self.propagation_policy = Some(propagation_policy);
  }

  pub fn with_propagation_policy(mut self, propagation_policy: String) -> V1DeleteOptions {
    self.propagation_policy = Some(propagation_policy);
    self
  }

  pub fn propagation_policy(&self) -> Option<&String> {
    self.propagation_policy.as_ref()
  }

  pub fn reset_propagation_policy(&mut self) {
    self.propagation_policy = None;
  }

}



