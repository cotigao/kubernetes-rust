/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1ResourceRule : ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ResourceRule {
  /// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.
  #[serde(rename = "apiGroups")]
  api_groups: Option<Vec<String>>,
  /// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.
  #[serde(rename = "resourceNames")]
  resource_names: Option<Vec<String>>,
  /// Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.  \"*_/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.
  #[serde(rename = "resources")]
  resources: Option<Vec<String>>,
  /// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.
  #[serde(rename = "verbs")]
  verbs: Vec<String>
}

impl V1ResourceRule {
  /// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
  pub fn new(verbs: Vec<String>) -> V1ResourceRule {
    V1ResourceRule {
      api_groups: None,
      resource_names: None,
      resources: None,
      verbs: verbs
    }
  }

  pub fn set_api_groups(&mut self, api_groups: Vec<String>) {
    self.api_groups = Some(api_groups);
  }

  pub fn with_api_groups(mut self, api_groups: Vec<String>) -> V1ResourceRule {
    self.api_groups = Some(api_groups);
    self
  }

  pub fn api_groups(&self) -> Option<&Vec<String>> {
    self.api_groups.as_ref()
  }

  pub fn reset_api_groups(&mut self) {
    self.api_groups = None;
  }

  pub fn set_resource_names(&mut self, resource_names: Vec<String>) {
    self.resource_names = Some(resource_names);
  }

  pub fn with_resource_names(mut self, resource_names: Vec<String>) -> V1ResourceRule {
    self.resource_names = Some(resource_names);
    self
  }

  pub fn resource_names(&self) -> Option<&Vec<String>> {
    self.resource_names.as_ref()
  }

  pub fn reset_resource_names(&mut self) {
    self.resource_names = None;
  }

  pub fn set_resources(&mut self, resources: Vec<String>) {
    self.resources = Some(resources);
  }

  pub fn with_resources(mut self, resources: Vec<String>) -> V1ResourceRule {
    self.resources = Some(resources);
    self
  }

  pub fn resources(&self) -> Option<&Vec<String>> {
    self.resources.as_ref()
  }

  pub fn reset_resources(&mut self) {
    self.resources = None;
  }

  pub fn set_verbs(&mut self, verbs: Vec<String>) {
    self.verbs = verbs;
  }

  pub fn with_verbs(mut self, verbs: Vec<String>) -> V1ResourceRule {
    self.verbs = verbs;
    self
  }

  pub fn verbs(&self) -> &Vec<String> {
    &self.verbs
  }


}



