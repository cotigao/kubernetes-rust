/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1ExecAction : ExecAction describes a \"run in container\" action.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1ExecAction {
  /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
  #[serde(rename = "command")]
  command: Option<Vec<String>>
}

impl IoK8sKubernetesPkgApiV1ExecAction {
  /// ExecAction describes a \"run in container\" action.
  pub fn new() -> IoK8sKubernetesPkgApiV1ExecAction {
    IoK8sKubernetesPkgApiV1ExecAction {
      command: None
    }
  }

  pub fn set_command(&mut self, command: Vec<String>) {
    self.command = Some(command);
  }

  pub fn with_command(mut self, command: Vec<String>) -> IoK8sKubernetesPkgApiV1ExecAction {
    self.command = Some(command);
    self
  }

  pub fn command(&self) -> Option<&Vec<String>> {
    self.command.as_ref()
  }

  pub fn reset_command(&mut self) {
    self.command = None;
  }

}



