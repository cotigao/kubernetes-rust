/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1ObjectReference : ObjectReference contains enough information to let you inspect or modify the referred object.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ObjectReference {
  /// API version of the referent.
  #[serde(rename = "apiVersion")]
  api_version: Option<String>,
  /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  #[serde(rename = "fieldPath")]
  field_path: Option<String>,
  /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
  #[serde(rename = "kind")]
  kind: Option<String>,
  /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  #[serde(rename = "name")]
  name: Option<String>,
  /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  #[serde(rename = "namespace")]
  namespace: Option<String>,
  /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
  #[serde(rename = "resourceVersion")]
  resource_version: Option<String>,
  /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  #[serde(rename = "uid")]
  uid: Option<String>
}

impl V1ObjectReference {
  /// ObjectReference contains enough information to let you inspect or modify the referred object.
  pub fn new() -> V1ObjectReference {
    V1ObjectReference {
      api_version: None,
      field_path: None,
      kind: None,
      name: None,
      namespace: None,
      resource_version: None,
      uid: None
    }
  }

  pub fn set_api_version(&mut self, api_version: String) {
    self.api_version = Some(api_version);
  }

  pub fn with_api_version(mut self, api_version: String) -> V1ObjectReference {
    self.api_version = Some(api_version);
    self
  }

  pub fn api_version(&self) -> Option<&String> {
    self.api_version.as_ref()
  }

  pub fn reset_api_version(&mut self) {
    self.api_version = None;
  }

  pub fn set_field_path(&mut self, field_path: String) {
    self.field_path = Some(field_path);
  }

  pub fn with_field_path(mut self, field_path: String) -> V1ObjectReference {
    self.field_path = Some(field_path);
    self
  }

  pub fn field_path(&self) -> Option<&String> {
    self.field_path.as_ref()
  }

  pub fn reset_field_path(&mut self) {
    self.field_path = None;
  }

  pub fn set_kind(&mut self, kind: String) {
    self.kind = Some(kind);
  }

  pub fn with_kind(mut self, kind: String) -> V1ObjectReference {
    self.kind = Some(kind);
    self
  }

  pub fn kind(&self) -> Option<&String> {
    self.kind.as_ref()
  }

  pub fn reset_kind(&mut self) {
    self.kind = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> V1ObjectReference {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_namespace(&mut self, namespace: String) {
    self.namespace = Some(namespace);
  }

  pub fn with_namespace(mut self, namespace: String) -> V1ObjectReference {
    self.namespace = Some(namespace);
    self
  }

  pub fn namespace(&self) -> Option<&String> {
    self.namespace.as_ref()
  }

  pub fn reset_namespace(&mut self) {
    self.namespace = None;
  }

  pub fn set_resource_version(&mut self, resource_version: String) {
    self.resource_version = Some(resource_version);
  }

  pub fn with_resource_version(mut self, resource_version: String) -> V1ObjectReference {
    self.resource_version = Some(resource_version);
    self
  }

  pub fn resource_version(&self) -> Option<&String> {
    self.resource_version.as_ref()
  }

  pub fn reset_resource_version(&mut self) {
    self.resource_version = None;
  }

  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> V1ObjectReference {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

}



