/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1ConfigMapNodeConfigSource : ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ConfigMapNodeConfigSource {
  /// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
  #[serde(rename = "kubeletConfigKey")]
  kubelet_config_key: String,
  /// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
  #[serde(rename = "name")]
  name: String,
  /// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
  #[serde(rename = "namespace")]
  namespace: String,
  /// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  #[serde(rename = "resourceVersion")]
  resource_version: Option<String>,
  /// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
  #[serde(rename = "uid")]
  uid: Option<String>
}

impl V1ConfigMapNodeConfigSource {
  /// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
  pub fn new(kubelet_config_key: String, name: String, namespace: String) -> V1ConfigMapNodeConfigSource {
    V1ConfigMapNodeConfigSource {
      kubelet_config_key: kubelet_config_key,
      name: name,
      namespace: namespace,
      resource_version: None,
      uid: None
    }
  }

  pub fn set_kubelet_config_key(&mut self, kubelet_config_key: String) {
    self.kubelet_config_key = kubelet_config_key;
  }

  pub fn with_kubelet_config_key(mut self, kubelet_config_key: String) -> V1ConfigMapNodeConfigSource {
    self.kubelet_config_key = kubelet_config_key;
    self
  }

  pub fn kubelet_config_key(&self) -> &String {
    &self.kubelet_config_key
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> V1ConfigMapNodeConfigSource {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_namespace(&mut self, namespace: String) {
    self.namespace = namespace;
  }

  pub fn with_namespace(mut self, namespace: String) -> V1ConfigMapNodeConfigSource {
    self.namespace = namespace;
    self
  }

  pub fn namespace(&self) -> &String {
    &self.namespace
  }


  pub fn set_resource_version(&mut self, resource_version: String) {
    self.resource_version = Some(resource_version);
  }

  pub fn with_resource_version(mut self, resource_version: String) -> V1ConfigMapNodeConfigSource {
    self.resource_version = Some(resource_version);
    self
  }

  pub fn resource_version(&self) -> Option<&String> {
    self.resource_version.as_ref()
  }

  pub fn reset_resource_version(&mut self) {
    self.resource_version = None;
  }

  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> V1ConfigMapNodeConfigSource {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

}



