/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec : PodPresetSpec is a description of a pod preset.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
  /// Env defines the collection of EnvVar to inject into containers.
  #[serde(rename = "env")]
  env: Option<Vec<::models::IoK8sKubernetesPkgApiV1EnvVar>>,
  /// EnvFrom defines the collection of EnvFromSource to inject into containers.
  #[serde(rename = "envFrom")]
  env_from: Option<Vec<::models::IoK8sKubernetesPkgApiV1EnvFromSource>>,
  /// Selector is a label query over a set of resources, in this case pods. Required.
  #[serde(rename = "selector")]
  selector: Option<::models::IoK8sApimachineryPkgApisMetaV1LabelSelector>,
  /// VolumeMounts defines the collection of VolumeMount to inject into containers.
  #[serde(rename = "volumeMounts")]
  volume_mounts: Option<Vec<::models::IoK8sKubernetesPkgApiV1VolumeMount>>,
  /// Volumes defines the collection of Volume to inject into the pod.
  #[serde(rename = "volumes")]
  volumes: Option<Vec<::models::IoK8sKubernetesPkgApiV1Volume>>
}

impl IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
  /// PodPresetSpec is a description of a pod preset.
  pub fn new() -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
      env: None,
      env_from: None,
      selector: None,
      volume_mounts: None,
      volumes: None
    }
  }

  pub fn set_env(&mut self, env: Vec<::models::IoK8sKubernetesPkgApiV1EnvVar>) {
    self.env = Some(env);
  }

  pub fn with_env(mut self, env: Vec<::models::IoK8sKubernetesPkgApiV1EnvVar>) -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    self.env = Some(env);
    self
  }

  pub fn env(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1EnvVar>> {
    self.env.as_ref()
  }

  pub fn reset_env(&mut self) {
    self.env = None;
  }

  pub fn set_env_from(&mut self, env_from: Vec<::models::IoK8sKubernetesPkgApiV1EnvFromSource>) {
    self.env_from = Some(env_from);
  }

  pub fn with_env_from(mut self, env_from: Vec<::models::IoK8sKubernetesPkgApiV1EnvFromSource>) -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    self.env_from = Some(env_from);
    self
  }

  pub fn env_from(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1EnvFromSource>> {
    self.env_from.as_ref()
  }

  pub fn reset_env_from(&mut self) {
    self.env_from = None;
  }

  pub fn set_selector(&mut self, selector: ::models::IoK8sApimachineryPkgApisMetaV1LabelSelector) {
    self.selector = Some(selector);
  }

  pub fn with_selector(mut self, selector: ::models::IoK8sApimachineryPkgApisMetaV1LabelSelector) -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    self.selector = Some(selector);
    self
  }

  pub fn selector(&self) -> Option<&::models::IoK8sApimachineryPkgApisMetaV1LabelSelector> {
    self.selector.as_ref()
  }

  pub fn reset_selector(&mut self) {
    self.selector = None;
  }

  pub fn set_volume_mounts(&mut self, volume_mounts: Vec<::models::IoK8sKubernetesPkgApiV1VolumeMount>) {
    self.volume_mounts = Some(volume_mounts);
  }

  pub fn with_volume_mounts(mut self, volume_mounts: Vec<::models::IoK8sKubernetesPkgApiV1VolumeMount>) -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    self.volume_mounts = Some(volume_mounts);
    self
  }

  pub fn volume_mounts(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1VolumeMount>> {
    self.volume_mounts.as_ref()
  }

  pub fn reset_volume_mounts(&mut self) {
    self.volume_mounts = None;
  }

  pub fn set_volumes(&mut self, volumes: Vec<::models::IoK8sKubernetesPkgApiV1Volume>) {
    self.volumes = Some(volumes);
  }

  pub fn with_volumes(mut self, volumes: Vec<::models::IoK8sKubernetesPkgApiV1Volume>) -> IoK8sKubernetesPkgApisSettingsV1alpha1PodPresetSpec {
    self.volumes = Some(volumes);
    self
  }

  pub fn volumes(&self) -> Option<&Vec<::models::IoK8sKubernetesPkgApiV1Volume>> {
    self.volumes.as_ref()
  }

  pub fn reset_volumes(&mut self) {
    self.volumes = None;
  }

}



