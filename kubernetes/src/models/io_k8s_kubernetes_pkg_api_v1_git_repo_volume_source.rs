/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoK8sKubernetesPkgApiV1GitRepoVolumeSource : Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
  /// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  #[serde(rename = "directory")]
  directory: Option<String>,
  /// Repository URL
  #[serde(rename = "repository")]
  repository: String,
  /// Commit hash for the specified revision.
  #[serde(rename = "revision")]
  revision: Option<String>
}

impl IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
  /// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
  pub fn new(repository: String) -> IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
    IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
      directory: None,
      repository: repository,
      revision: None
    }
  }

  pub fn set_directory(&mut self, directory: String) {
    self.directory = Some(directory);
  }

  pub fn with_directory(mut self, directory: String) -> IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
    self.directory = Some(directory);
    self
  }

  pub fn directory(&self) -> Option<&String> {
    self.directory.as_ref()
  }

  pub fn reset_directory(&mut self) {
    self.directory = None;
  }

  pub fn set_repository(&mut self, repository: String) {
    self.repository = repository;
  }

  pub fn with_repository(mut self, repository: String) -> IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
    self.repository = repository;
    self
  }

  pub fn repository(&self) -> &String {
    &self.repository
  }


  pub fn set_revision(&mut self, revision: String) {
    self.revision = Some(revision);
  }

  pub fn with_revision(mut self, revision: String) -> IoK8sKubernetesPkgApiV1GitRepoVolumeSource {
    self.revision = Some(revision);
    self
  }

  pub fn revision(&self) -> Option<&String> {
    self.revision.as_ref()
  }

  pub fn reset_revision(&mut self) {
    self.revision = None;
  }

}



