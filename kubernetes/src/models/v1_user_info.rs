/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.12.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// V1UserInfo : UserInfo holds the information about the user needed to implement the user.Info interface.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct V1UserInfo {
  /// Any additional information provided by the authenticator.
  #[serde(rename = "extra")]
  extra: Option<::std::collections::HashMap<String, Vec<String>>>,
  /// The names of groups this user is a part of.
  #[serde(rename = "groups")]
  groups: Option<Vec<String>>,
  /// A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
  #[serde(rename = "uid")]
  uid: Option<String>,
  /// The name that uniquely identifies this user among all active users.
  #[serde(rename = "username")]
  username: Option<String>
}

impl V1UserInfo {
  /// UserInfo holds the information about the user needed to implement the user.Info interface.
  pub fn new() -> V1UserInfo {
    V1UserInfo {
      extra: None,
      groups: None,
      uid: None,
      username: None
    }
  }

  pub fn set_extra(&mut self, extra: ::std::collections::HashMap<String, Vec<String>>) {
    self.extra = Some(extra);
  }

  pub fn with_extra(mut self, extra: ::std::collections::HashMap<String, Vec<String>>) -> V1UserInfo {
    self.extra = Some(extra);
    self
  }

  pub fn extra(&self) -> Option<&::std::collections::HashMap<String, Vec<String>>> {
    self.extra.as_ref()
  }

  pub fn reset_extra(&mut self) {
    self.extra = None;
  }

  pub fn set_groups(&mut self, groups: Vec<String>) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Vec<String>) -> V1UserInfo {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Vec<String>> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> V1UserInfo {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> V1UserInfo {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



