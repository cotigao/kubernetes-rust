/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IoK8sKubernetesPkgApiV1Probe : Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IoK8sKubernetesPkgApiV1Probe {
  /// One and only one of the following should be specified. Exec specifies the action to take.
  #[serde(rename = "exec")]
  exec: Option<::models::IoK8sKubernetesPkgApiV1ExecAction>,
  /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  #[serde(rename = "failureThreshold")]
  failure_threshold: Option<i32>,
  /// HTTPGet specifies the http request to perform.
  #[serde(rename = "httpGet")]
  http_get: Option<::models::IoK8sKubernetesPkgApiV1HttpGetAction>,
  /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  #[serde(rename = "initialDelaySeconds")]
  initial_delay_seconds: Option<i32>,
  /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  #[serde(rename = "periodSeconds")]
  period_seconds: Option<i32>,
  /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
  #[serde(rename = "successThreshold")]
  success_threshold: Option<i32>,
  /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
  #[serde(rename = "tcpSocket")]
  tcp_socket: Option<::models::IoK8sKubernetesPkgApiV1TcpSocketAction>,
  /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
  #[serde(rename = "timeoutSeconds")]
  timeout_seconds: Option<i32>
}

impl IoK8sKubernetesPkgApiV1Probe {
  /// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
  pub fn new() -> IoK8sKubernetesPkgApiV1Probe {
    IoK8sKubernetesPkgApiV1Probe {
      exec: None,
      failure_threshold: None,
      http_get: None,
      initial_delay_seconds: None,
      period_seconds: None,
      success_threshold: None,
      tcp_socket: None,
      timeout_seconds: None
    }
  }

  pub fn set_exec(&mut self, exec: ::models::IoK8sKubernetesPkgApiV1ExecAction) {
    self.exec = Some(exec);
  }

  pub fn with_exec(mut self, exec: ::models::IoK8sKubernetesPkgApiV1ExecAction) -> IoK8sKubernetesPkgApiV1Probe {
    self.exec = Some(exec);
    self
  }

  pub fn exec(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1ExecAction> {
    self.exec.as_ref()
  }

  pub fn reset_exec(&mut self) {
    self.exec = None;
  }

  pub fn set_failure_threshold(&mut self, failure_threshold: i32) {
    self.failure_threshold = Some(failure_threshold);
  }

  pub fn with_failure_threshold(mut self, failure_threshold: i32) -> IoK8sKubernetesPkgApiV1Probe {
    self.failure_threshold = Some(failure_threshold);
    self
  }

  pub fn failure_threshold(&self) -> Option<&i32> {
    self.failure_threshold.as_ref()
  }

  pub fn reset_failure_threshold(&mut self) {
    self.failure_threshold = None;
  }

  pub fn set_http_get(&mut self, http_get: ::models::IoK8sKubernetesPkgApiV1HttpGetAction) {
    self.http_get = Some(http_get);
  }

  pub fn with_http_get(mut self, http_get: ::models::IoK8sKubernetesPkgApiV1HttpGetAction) -> IoK8sKubernetesPkgApiV1Probe {
    self.http_get = Some(http_get);
    self
  }

  pub fn http_get(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1HttpGetAction> {
    self.http_get.as_ref()
  }

  pub fn reset_http_get(&mut self) {
    self.http_get = None;
  }

  pub fn set_initial_delay_seconds(&mut self, initial_delay_seconds: i32) {
    self.initial_delay_seconds = Some(initial_delay_seconds);
  }

  pub fn with_initial_delay_seconds(mut self, initial_delay_seconds: i32) -> IoK8sKubernetesPkgApiV1Probe {
    self.initial_delay_seconds = Some(initial_delay_seconds);
    self
  }

  pub fn initial_delay_seconds(&self) -> Option<&i32> {
    self.initial_delay_seconds.as_ref()
  }

  pub fn reset_initial_delay_seconds(&mut self) {
    self.initial_delay_seconds = None;
  }

  pub fn set_period_seconds(&mut self, period_seconds: i32) {
    self.period_seconds = Some(period_seconds);
  }

  pub fn with_period_seconds(mut self, period_seconds: i32) -> IoK8sKubernetesPkgApiV1Probe {
    self.period_seconds = Some(period_seconds);
    self
  }

  pub fn period_seconds(&self) -> Option<&i32> {
    self.period_seconds.as_ref()
  }

  pub fn reset_period_seconds(&mut self) {
    self.period_seconds = None;
  }

  pub fn set_success_threshold(&mut self, success_threshold: i32) {
    self.success_threshold = Some(success_threshold);
  }

  pub fn with_success_threshold(mut self, success_threshold: i32) -> IoK8sKubernetesPkgApiV1Probe {
    self.success_threshold = Some(success_threshold);
    self
  }

  pub fn success_threshold(&self) -> Option<&i32> {
    self.success_threshold.as_ref()
  }

  pub fn reset_success_threshold(&mut self) {
    self.success_threshold = None;
  }

  pub fn set_tcp_socket(&mut self, tcp_socket: ::models::IoK8sKubernetesPkgApiV1TcpSocketAction) {
    self.tcp_socket = Some(tcp_socket);
  }

  pub fn with_tcp_socket(mut self, tcp_socket: ::models::IoK8sKubernetesPkgApiV1TcpSocketAction) -> IoK8sKubernetesPkgApiV1Probe {
    self.tcp_socket = Some(tcp_socket);
    self
  }

  pub fn tcp_socket(&self) -> Option<&::models::IoK8sKubernetesPkgApiV1TcpSocketAction> {
    self.tcp_socket.as_ref()
  }

  pub fn reset_tcp_socket(&mut self) {
    self.tcp_socket = None;
  }

  pub fn set_timeout_seconds(&mut self, timeout_seconds: i32) {
    self.timeout_seconds = Some(timeout_seconds);
  }

  pub fn with_timeout_seconds(mut self, timeout_seconds: i32) -> IoK8sKubernetesPkgApiV1Probe {
    self.timeout_seconds = Some(timeout_seconds);
    self
  }

  pub fn timeout_seconds(&self) -> Option<&i32> {
    self.timeout_seconds.as_ref()
  }

  pub fn reset_timeout_seconds(&mut self) {
    self.timeout_seconds = None;
  }

}



