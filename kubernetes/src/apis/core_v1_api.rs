/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CoreV1ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CoreV1ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CoreV1ApiClient<C> {
        CoreV1ApiClient {
            configuration: configuration,
        }
    }
}

pub trait CoreV1Api {
    fn connect_core_v1_delete_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_delete_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_delete_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_delete_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_delete_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_delete_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_pod_attach(&self, name: &str, namespace: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_pod_exec(&self, name: &str, namespace: &str, command: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_pod_portforward(&self, name: &str, namespace: &str, ports: i32) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_get_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_head_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_options_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_patch_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_pod_attach(&self, name: &str, namespace: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_pod_exec(&self, name: &str, namespace: &str, command: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_pod_portforward(&self, name: &str, namespace: &str, ports: i32) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_post_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn connect_core_v1_put_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespace(&self, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_binding(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_binding: ::models::IoK8sKubernetesPkgApiV1Binding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Binding, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_config_map(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_config_map: ::models::IoK8sKubernetesPkgApiV1ConfigMap, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_endpoints(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_endpoints: ::models::IoK8sKubernetesPkgApiV1Endpoints, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_event(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_event: ::models::IoK8sKubernetesPkgApiV1Event, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_limit_range(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_limit_range: ::models::IoK8sKubernetesPkgApiV1LimitRange, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_persistent_volume_claim(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_pod(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_pod_binding(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_binding: ::models::IoK8sKubernetesPkgApiV1Binding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Binding, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_pod_eviction(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_policy_v1beta1_eviction: ::models::IoK8sKubernetesPkgApisPolicyV1beta1Eviction, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisPolicyV1beta1Eviction, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_pod_template(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod_template: ::models::IoK8sKubernetesPkgApiV1PodTemplate, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_replication_controller(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_resource_quota(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_secret(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_secret: ::models::IoK8sKubernetesPkgApiV1Secret, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_service(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn create_core_v1_namespaced_service_account(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service_account: ::models::IoK8sKubernetesPkgApiV1ServiceAccount, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>>;
    fn create_core_v1_node(&self, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn create_core_v1_persistent_volume(&self, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_config_map(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_endpoints(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_event(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_limit_range(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_persistent_volume_claim(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_pod(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_pod_template(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_replication_controller(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_resource_quota(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_secret(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_namespaced_service_account(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_node(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_collection_persistent_volume(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespace(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_service(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_node(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_core_v1_persistent_volume(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn get_core_v1_api_resources(&self, ) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_component_status(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ComponentStatusList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_config_map_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMapList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_endpoints_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EndpointsList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_event_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EventList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_limit_range_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRangeList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespace(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1NamespaceList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_config_map(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMapList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_endpoints(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EndpointsList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_event(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EventList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_limit_range(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRangeList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_persistent_volume_claim(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaimList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_pod(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_pod_template(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplateList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_replication_controller(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationControllerList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_resource_quota(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuotaList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_secret(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1SecretList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_service(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_namespaced_service_account(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccountList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_node(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1NodeList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_persistent_volume(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_persistent_volume_claim_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaimList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_pod_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_pod_template_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplateList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_replication_controller_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationControllerList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_resource_quota_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuotaList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_secret_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1SecretList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_service_account_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccountList, Error = Error<serde_json::Value>>>;
    fn list_core_v1_service_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceList, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespace(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespace_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_service(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_node(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_node_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_persistent_volume(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn patch_core_v1_persistent_volume_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_delete_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_get_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_head_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_options_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_patch_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_post_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn proxy_core_v1_put_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn read_core_v1_component_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ComponentStatus, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespace(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespace_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_event(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_pod(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_pod_log(&self, name: &str, namespace: &str, container: &str, follow: bool, limit_bytes: i32, pretty: &str, previous: bool, since_seconds: i32, tail_lines: i32, timestamps: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_secret(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_service(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>>;
    fn read_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn read_core_v1_node(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn read_core_v1_node_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn read_core_v1_persistent_volume(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn read_core_v1_persistent_volume_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespace(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespace_finalize(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespace_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_config_map: ::models::IoK8sKubernetesPkgApiV1ConfigMap, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_endpoints: ::models::IoK8sKubernetesPkgApiV1Endpoints, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_event: ::models::IoK8sKubernetesPkgApiV1Event, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_limit_range: ::models::IoK8sKubernetesPkgApiV1LimitRange, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod_template: ::models::IoK8sKubernetesPkgApiV1PodTemplate, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_autoscaling_v1_scale: ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_secret: ::models::IoK8sKubernetesPkgApiV1Secret, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_service(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service_account: ::models::IoK8sKubernetesPkgApiV1ServiceAccount, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_node(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_node_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_persistent_volume(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn replace_core_v1_persistent_volume_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_config_map_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_endpoints_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_event_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_limit_range_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespace(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespace_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_config_map_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_endpoints_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_event(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_event_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_limit_range_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_persistent_volume_claim_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_pod(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_pod_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_pod_template_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_replication_controller_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_resource_quota_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_secret(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_secret_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_service(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_service_account_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_namespaced_service_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_node(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_node_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_persistent_volume(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_persistent_volume_claim_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_persistent_volume_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_pod_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_pod_template_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_replication_controller_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_resource_quota_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_secret_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_service_account_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_core_v1_service_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>CoreV1Api for CoreV1ApiClient<C> {
    fn connect_core_v1_delete_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_delete_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_delete_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_delete_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_delete_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_delete_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_pod_attach(&self, name: &str, namespace: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/attach".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("container".to_string(), container.to_string())
            .with_query_param("stderr".to_string(), stderr.to_string())
            .with_query_param("stdin".to_string(), stdin.to_string())
            .with_query_param("stdout".to_string(), stdout.to_string())
            .with_query_param("tty".to_string(), tty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_pod_exec(&self, name: &str, namespace: &str, command: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/exec".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("command".to_string(), command.to_string())
            .with_query_param("container".to_string(), container.to_string())
            .with_query_param("stderr".to_string(), stderr.to_string())
            .with_query_param("stdin".to_string(), stdin.to_string())
            .with_query_param("stdout".to_string(), stdout.to_string())
            .with_query_param("tty".to_string(), tty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_pod_portforward(&self, name: &str, namespace: &str, ports: i32) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/portforward".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("ports".to_string(), ports.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_get_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_head_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_options_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_patch_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_pod_attach(&self, name: &str, namespace: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/attach".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("container".to_string(), container.to_string())
            .with_query_param("stderr".to_string(), stderr.to_string())
            .with_query_param("stdin".to_string(), stdin.to_string())
            .with_query_param("stdout".to_string(), stdout.to_string())
            .with_query_param("tty".to_string(), tty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_pod_exec(&self, name: &str, namespace: &str, command: &str, container: &str, stderr: bool, stdin: bool, stdout: bool, tty: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/exec".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("command".to_string(), command.to_string())
            .with_query_param("container".to_string(), container.to_string())
            .with_query_param("stderr".to_string(), stderr.to_string())
            .with_query_param("stdin".to_string(), stdin.to_string())
            .with_query_param("stdout".to_string(), stdout.to_string())
            .with_query_param("tty".to_string(), tty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_pod_portforward(&self, name: &str, namespace: &str, ports: i32) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/portforward".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("ports".to_string(), ports.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_post_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_namespaced_pod_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/pods/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_namespaced_pod_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_namespaced_service_proxy(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/services/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_namespaced_service_proxy_with_path(&self, name: &str, namespace: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_node_proxy(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/nodes/{name}/proxy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn connect_core_v1_put_node_proxy_with_path(&self, name: &str, path: &str, path2: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/nodes/{name}/proxy/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("path".to_string(), path2.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespace(&self, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_namespace)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_binding(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_binding: ::models::IoK8sKubernetesPkgApiV1Binding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Binding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/bindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_binding)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_config_map(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_config_map: ::models::IoK8sKubernetesPkgApiV1ConfigMap, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_config_map)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_endpoints(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_endpoints: ::models::IoK8sKubernetesPkgApiV1Endpoints, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_endpoints)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_event(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_event: ::models::IoK8sKubernetesPkgApiV1Event, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_event)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_limit_range(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_limit_range: ::models::IoK8sKubernetesPkgApiV1LimitRange, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_limit_range)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_persistent_volume_claim(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_pod(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_pod)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_pod_binding(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_binding: ::models::IoK8sKubernetesPkgApiV1Binding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Binding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/binding".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_binding)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_pod_eviction(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_policy_v1beta1_eviction: ::models::IoK8sKubernetesPkgApisPolicyV1beta1Eviction, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisPolicyV1beta1Eviction, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/pods/{name}/eviction".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_policy_v1beta1_eviction)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_pod_template(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod_template: ::models::IoK8sKubernetesPkgApiV1PodTemplate, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_pod_template)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_replication_controller(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_replication_controller)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_resource_quota(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_resource_quota)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_secret(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_secret: ::models::IoK8sKubernetesPkgApiV1Secret, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_secret)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_service(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/services".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_service)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_namespaced_service_account(&self, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service_account: ::models::IoK8sKubernetesPkgApiV1ServiceAccount, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/namespaces/{namespace}/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_service_account)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_node(&self, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/nodes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_node)
            .execute(self.configuration.borrow())
    }

    fn create_core_v1_persistent_volume(&self, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/persistentvolumes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_config_map(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_endpoints(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_event(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_limit_range(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_persistent_volume_claim(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_pod(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_pod_template(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_replication_controller(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_resource_quota(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_secret(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_namespaced_service_account(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_node(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/nodes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_collection_persistent_volume(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/persistentvolumes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespace(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/configmaps/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/endpoints/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/events/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/limitranges/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/podtemplates/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/resourcequotas/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/secrets/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_service(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_node(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_core_v1_persistent_volume(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/persistentvolumes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn get_core_v1_api_resources(&self, ) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_component_status(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ComponentStatusList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/componentstatuses".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_config_map_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMapList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_endpoints_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EndpointsList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_event_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EventList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_limit_range_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRangeList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespace(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1NamespaceList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_config_map(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMapList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_endpoints(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EndpointsList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_event(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1EventList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_limit_range(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRangeList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_persistent_volume_claim(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaimList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_pod(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_pod_template(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplateList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_replication_controller(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationControllerList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_resource_quota(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuotaList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_secret(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1SecretList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_service(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/services".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_namespaced_service_account(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccountList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_node(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1NodeList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/nodes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_persistent_volume(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/persistentvolumes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_persistent_volume_claim_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaimList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_pod_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_pod_template_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplateList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_replication_controller_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationControllerList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_resource_quota_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuotaList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_secret_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1SecretList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_service_account_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccountList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_core_v1_service_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/services".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespace(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespace_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/configmaps/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/endpoints/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/events/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/limitranges/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/pods/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/podtemplates/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/resourcequotas/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/secrets/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_service(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/namespaces/{namespace}/services/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_node(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_node_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/nodes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_persistent_volume(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/persistentvolumes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_core_v1_persistent_volume_status(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/persistentvolumes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_delete_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_get_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_head_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Head, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_options_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Options, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_patch_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_post_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_namespaced_pod(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_namespaced_pod_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_namespaced_service(&self, name: &str, namespace: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_namespaced_service_with_path(&self, name: &str, namespace: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_node(&self, name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn proxy_core_v1_put_node_with_path(&self, name: &str, path: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/proxy/nodes/{name}/{path}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_component_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ComponentStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/componentstatuses/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespace(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespace_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/configmaps/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/endpoints/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_event(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/events/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/limitranges/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_pod(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_pod_log(&self, name: &str, namespace: &str, container: &str, follow: bool, limit_bytes: i32, pretty: &str, previous: bool, since_seconds: i32, tail_lines: i32, timestamps: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/log".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("container".to_string(), container.to_string())
            .with_query_param("follow".to_string(), follow.to_string())
            .with_query_param("limitBytes".to_string(), limit_bytes.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("previous".to_string(), previous.to_string())
            .with_query_param("sinceSeconds".to_string(), since_seconds.to_string())
            .with_query_param("tailLines".to_string(), tail_lines.to_string())
            .with_query_param("timestamps".to_string(), timestamps.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/pods/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/podtemplates/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/resourcequotas/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_secret(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/secrets/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_service(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/namespaces/{namespace}/services/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_node(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_node_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/nodes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_persistent_volume(&self, name: &str, pretty: &str, exact: bool, export: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/persistentvolumes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("exact".to_string(), exact.to_string())
            .with_query_param("export".to_string(), export.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_core_v1_persistent_volume_status(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/persistentvolumes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespace(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_namespace)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespace_finalize(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{name}/finalize".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_namespace)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespace_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_namespace: ::models::IoK8sKubernetesPkgApiV1Namespace, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Namespace, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_namespace)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_config_map: ::models::IoK8sKubernetesPkgApiV1ConfigMap, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ConfigMap, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/configmaps/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_config_map)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_endpoints: ::models::IoK8sKubernetesPkgApiV1Endpoints, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Endpoints, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/endpoints/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_endpoints)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_event(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_event: ::models::IoK8sKubernetesPkgApiV1Event, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Event, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/events/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_event)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_limit_range: ::models::IoK8sKubernetesPkgApiV1LimitRange, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1LimitRange, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/limitranges/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_limit_range)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_persistent_volume_claim_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim: ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolumeClaim, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume_claim)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_pod(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_pod)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_pod_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod: ::models::IoK8sKubernetesPkgApiV1Pod, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Pod, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/pods/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_pod)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_pod_template: ::models::IoK8sKubernetesPkgApiV1PodTemplate, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PodTemplate, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/podtemplates/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_pod_template)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_replication_controller)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_replication_controller_scale(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_autoscaling_v1_scale: ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisAutoscalingV1Scale, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_autoscaling_v1_scale)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_replication_controller_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_replication_controller: ::models::IoK8sKubernetesPkgApiV1ReplicationController, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ReplicationController, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_replication_controller)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/resourcequotas/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_resource_quota)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_resource_quota_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_resource_quota: ::models::IoK8sKubernetesPkgApiV1ResourceQuota, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ResourceQuota, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_resource_quota)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_secret(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_secret: ::models::IoK8sKubernetesPkgApiV1Secret, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Secret, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/secrets/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_secret)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_service(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_service)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service_account: ::models::IoK8sKubernetesPkgApiV1ServiceAccount, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1ServiceAccount, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_service_account)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_namespaced_service_status(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_api_v1_service: ::models::IoK8sKubernetesPkgApiV1Service, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Service, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/namespaces/{namespace}/services/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_service)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_node(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_node)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_node_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_node: ::models::IoK8sKubernetesPkgApiV1Node, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1Node, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/nodes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_node)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_persistent_volume(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/persistentvolumes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume)
            .execute(self.configuration.borrow())
    }

    fn replace_core_v1_persistent_volume_status(&self, name: &str, io_k8s_kubernetes_pkg_api_v1_persistent_volume: ::models::IoK8sKubernetesPkgApiV1PersistentVolume, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApiV1PersistentVolume, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/api/v1/persistentvolumes/{name}/status".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_api_v1_persistent_volume)
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_config_map_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_endpoints_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_event_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_limit_range_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespace(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespace_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_config_map(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/configmaps/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_config_map_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/configmaps".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_endpoints(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/endpoints/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_endpoints_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/endpoints".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_event(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/events/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_event_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_limit_range(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/limitranges/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_limit_range_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/limitranges".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_persistent_volume_claim(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_persistent_volume_claim_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_pod(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/pods/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_pod_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_pod_template(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_pod_template_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_replication_controller(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_replication_controller_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_resource_quota(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_resource_quota_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_secret(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/secrets/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_secret_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_service(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/services/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_service_account(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_service_account_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_namespaced_service_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/namespaces/{namespace}/services".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_node(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/nodes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_node_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/nodes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_persistent_volume(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/persistentvolumes/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_persistent_volume_claim_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/persistentvolumeclaims".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_persistent_volume_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/persistentvolumes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_pod_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/pods".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_pod_template_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/podtemplates".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_replication_controller_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/replicationcontrollers".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_resource_quota_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/resourcequotas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_secret_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/secrets".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_service_account_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/serviceaccounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_core_v1_service_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/api/v1/watch/services".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

}
