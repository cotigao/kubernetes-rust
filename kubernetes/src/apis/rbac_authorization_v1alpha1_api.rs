/* 
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1.7.12
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct RbacAuthorizationV1alpha1ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> RbacAuthorizationV1alpha1ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RbacAuthorizationV1alpha1ApiClient<C> {
        RbacAuthorizationV1alpha1ApiClient {
            configuration: configuration,
        }
    }
}

pub trait RbacAuthorizationV1alpha1Api {
    fn create_rbac_authorization_v1alpha1_cluster_role(&self, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>>;
    fn create_rbac_authorization_v1alpha1_cluster_role_binding(&self, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>>;
    fn create_rbac_authorization_v1alpha1_namespaced_role(&self, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>>;
    fn create_rbac_authorization_v1alpha1_namespaced_role_binding(&self, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_collection_cluster_role(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_collection_cluster_role_binding(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_collection_namespaced_role(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_collection_namespaced_role_binding(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn delete_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>>;
    fn get_rbac_authorization_v1alpha1_api_resources(&self, ) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_cluster_role(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_cluster_role_binding(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_namespaced_role(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_namespaced_role_binding(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_role_binding_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList, Error = Error<serde_json::Value>>>;
    fn list_rbac_authorization_v1alpha1_role_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleList, Error = Error<serde_json::Value>>>;
    fn patch_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>>;
    fn patch_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>>;
    fn patch_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>>;
    fn patch_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>>;
    fn read_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>>;
    fn read_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>>;
    fn read_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>>;
    fn read_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>>;
    fn replace_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>>;
    fn replace_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>>;
    fn replace_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>>;
    fn replace_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_cluster_role_binding_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_cluster_role_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_namespaced_role_binding_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_namespaced_role_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_role_binding_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
    fn watch_rbac_authorization_v1alpha1_role_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>RbacAuthorizationV1alpha1Api for RbacAuthorizationV1alpha1ApiClient<C> {
    fn create_rbac_authorization_v1alpha1_cluster_role(&self, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role)
            .execute(self.configuration.borrow())
    }

    fn create_rbac_authorization_v1alpha1_cluster_role_binding(&self, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding)
            .execute(self.configuration.borrow())
    }

    fn create_rbac_authorization_v1alpha1_namespaced_role(&self, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role)
            .execute(self.configuration.borrow())
    }

    fn create_rbac_authorization_v1alpha1_namespaced_role_binding(&self, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding)
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_collection_cluster_role(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_collection_cluster_role_binding(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_collection_namespaced_role(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_collection_namespaced_role_binding(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn delete_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_delete_options: ::models::IoK8sApimachineryPkgApisMetaV1DeleteOptions, pretty: &str, grace_period_seconds: i32, orphan_dependents: bool, propagation_policy: &str) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1Status, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("gracePeriodSeconds".to_string(), grace_period_seconds.to_string())
            .with_query_param("orphanDependents".to_string(), orphan_dependents.to_string())
            .with_query_param("propagationPolicy".to_string(), propagation_policy.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_delete_options)
            .execute(self.configuration.borrow())
    }

    fn get_rbac_authorization_v1alpha1_api_resources(&self, ) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1ApiResourceList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_cluster_role(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_cluster_role_binding(&self, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBindingList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_namespaced_role(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_namespaced_role_binding(&self, namespace: &str, pretty: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_role_binding_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBindingList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_rbac_authorization_v1alpha1_role_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn patch_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn patch_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_apimachinery_pkg_apis_meta_v1_patch: ::models::IoK8sApimachineryPkgApisMetaV1Patch, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_apimachinery_pkg_apis_meta_v1_patch)
            .execute(self.configuration.borrow())
    }

    fn read_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn read_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn replace_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRole, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role)
            .execute(self.configuration.borrow())
    }

    fn replace_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1ClusterRoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_cluster_role_binding)
            .execute(self.configuration.borrow())
    }

    fn replace_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role: ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1Role, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role)
            .execute(self.configuration.borrow())
    }

    fn replace_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding: ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, pretty: &str) -> Box<Future<Item = ::models::IoK8sKubernetesPkgApisRbacV1alpha1RoleBinding, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .with_body_param(io_k8s_kubernetes_pkg_apis_rbac_v1alpha1_role_binding)
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_cluster_role(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_cluster_role_binding(&self, name: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_cluster_role_binding_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_cluster_role_list(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_namespaced_role(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_namespaced_role_binding(&self, name: &str, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_namespaced_role_binding_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_namespaced_role_list(&self, namespace: &str, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_role_binding_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

    fn watch_rbac_authorization_v1alpha1_role_list_for_all_namespaces(&self, field_selector: &str, include_uninitialized: bool, label_selector: &str, pretty: &str, resource_version: &str, timeout_seconds: i32, watch: bool) -> Box<Future<Item = ::models::IoK8sApimachineryPkgApisMetaV1WatchEvent, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_query_param("fieldSelector".to_string(), field_selector.to_string())
            .with_query_param("includeUninitialized".to_string(), include_uninitialized.to_string())
            .with_query_param("labelSelector".to_string(), label_selector.to_string())
            .with_query_param("pretty".to_string(), pretty.to_string())
            .with_query_param("resourceVersion".to_string(), resource_version.to_string())
            .with_query_param("timeoutSeconds".to_string(), timeout_seconds.to_string())
            .with_query_param("watch".to_string(), watch.to_string())
            .execute(self.configuration.borrow())
    }

}
